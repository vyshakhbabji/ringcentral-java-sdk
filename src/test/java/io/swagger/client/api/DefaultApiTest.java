/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccountInfo;
import io.swagger.client.model.AnsweringRuleInfo;
import io.swagger.client.model.BlockedNumberInfo;
import io.swagger.client.model.Body;
import io.swagger.client.model.Body1;
import io.swagger.client.model.Body10;
import io.swagger.client.model.Body11;
import io.swagger.client.model.Body12;
import io.swagger.client.model.Body13;
import io.swagger.client.model.Body14;
import io.swagger.client.model.Body15;
import io.swagger.client.model.Body16;
import io.swagger.client.model.Body17;
import io.swagger.client.model.Body18;
import io.swagger.client.model.Body2;
import io.swagger.client.model.Body3;
import io.swagger.client.model.Body4;
import io.swagger.client.model.Body5;
import io.swagger.client.model.Body6;
import io.swagger.client.model.Body7;
import io.swagger.client.model.Body8;
import io.swagger.client.model.Body9;
import io.swagger.client.model.CallLogInfo;
import io.swagger.client.model.ConferencingInfo;
import org.joda.time.DateTime;
import io.swagger.client.model.DeviceInfo;
import io.swagger.client.model.ExtensionInfo;
import io.swagger.client.model.ForwardingNumberInfo;
import io.swagger.client.model.FullCountryInfo;
import io.swagger.client.model.GroupInfo;
import io.swagger.client.model.InlineResponseDefault;
import io.swagger.client.model.InlineResponseDefault1;
import io.swagger.client.model.InlineResponseDefault10;
import io.swagger.client.model.InlineResponseDefault11;
import io.swagger.client.model.InlineResponseDefault12;
import io.swagger.client.model.InlineResponseDefault13;
import io.swagger.client.model.InlineResponseDefault14;
import io.swagger.client.model.InlineResponseDefault15;
import io.swagger.client.model.InlineResponseDefault16;
import io.swagger.client.model.InlineResponseDefault17;
import io.swagger.client.model.InlineResponseDefault18;
import io.swagger.client.model.InlineResponseDefault19;
import io.swagger.client.model.InlineResponseDefault2;
import io.swagger.client.model.InlineResponseDefault20;
import io.swagger.client.model.InlineResponseDefault21;
import io.swagger.client.model.InlineResponseDefault22;
import io.swagger.client.model.InlineResponseDefault23;
import io.swagger.client.model.InlineResponseDefault24;
import io.swagger.client.model.InlineResponseDefault25;
import io.swagger.client.model.InlineResponseDefault26;
import io.swagger.client.model.InlineResponseDefault27;
import io.swagger.client.model.InlineResponseDefault28;
import io.swagger.client.model.InlineResponseDefault29;
import io.swagger.client.model.InlineResponseDefault3;
import io.swagger.client.model.InlineResponseDefault30;
import io.swagger.client.model.InlineResponseDefault31;
import io.swagger.client.model.InlineResponseDefault32;
import io.swagger.client.model.InlineResponseDefault33;
import io.swagger.client.model.InlineResponseDefault34;
import io.swagger.client.model.InlineResponseDefault35;
import io.swagger.client.model.InlineResponseDefault36;
import io.swagger.client.model.InlineResponseDefault37;
import io.swagger.client.model.InlineResponseDefault4;
import io.swagger.client.model.InlineResponseDefault5;
import io.swagger.client.model.InlineResponseDefault6;
import io.swagger.client.model.InlineResponseDefault7;
import io.swagger.client.model.InlineResponseDefault8;
import io.swagger.client.model.InlineResponseDefault9;
import io.swagger.client.model.LanguageInfo;
import io.swagger.client.model.MeetingInfo;
import io.swagger.client.model.MessageInfo;
import io.swagger.client.model.PersonalContactInfo;
import io.swagger.client.model.PhoneNumberInfo;
import io.swagger.client.model.PresenceInfo;
import io.swagger.client.model.RingOutInfo;
import io.swagger.client.model.ServerInfo;
import io.swagger.client.model.StateInfo;
import io.swagger.client.model.SubscriptionInfo;
import io.swagger.client.model.TimezoneInfo;
import io.swagger.client.model.VersionInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Get Server Info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiGetTest() throws ApiException {
        ServerInfo response = api.restapiGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * OAuth2 Authorize
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiOauthAuthorizePostTest() throws ApiException {
        Body body = null;
        InlineResponseDefault response = api.restapiOauthAuthorizePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * OAuth2 Revoke Token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiOauthRevokePostTest() throws ApiException {
        Body1 body = null;
        api.restapiOauthRevokePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * OAuth2 Get Token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiOauthTokenPostTest() throws ApiException {
        Body2 body = null;
        InlineResponseDefault1 response = api.restapiOauthTokenPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Active (Recent) Calls
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdActiveCallsGetTest() throws ApiException {
        String accountId = null;
        String direction = null;
        String type = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault2 response = api.restapiV10AccountAccountIdActiveCallsGet(accountId, direction, type, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Company Business Address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdBusinessAddressGetTest() throws ApiException {
        String accountId = null;
        InlineResponseDefault3 response = api.restapiV10AccountAccountIdBusinessAddressGet(accountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Company Business Address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdBusinessAddressPutTest() throws ApiException {
        String accountId = null;
        Body3 body = null;
        InlineResponseDefault3 response = api.restapiV10AccountAccountIdBusinessAddressPut(accountId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Call Log Record by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdCallLogCallLogIdGetTest() throws ApiException {
        String accountId = null;
        String callLogId = null;
        CallLogInfo response = api.restapiV10AccountAccountIdCallLogCallLogIdGet(accountId, callLogId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Call Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdCallLogGetTest() throws ApiException {
        String accountId = null;
        String extensionNumber = null;
        String phoneNumber = null;
        String direction = null;
        String type = null;
        String view = null;
        Boolean withRecording = null;
        DateTime dateFrom = null;
        DateTime dateTo = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault2 response = api.restapiV10AccountAccountIdCallLogGet(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateFrom, dateTo, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Department Members
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetTest() throws ApiException {
        String accountId = null;
        String departmentId = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault4 response = api.restapiV10AccountAccountIdDepartmentDepartmentIdMembersGet(accountId, departmentId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Device by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdDeviceDeviceIdGetTest() throws ApiException {
        String accountId = null;
        String deviceId = null;
        DeviceInfo response = api.restapiV10AccountAccountIdDeviceDeviceIdGet(accountId, deviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Device List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdDeviceGetTest() throws ApiException {
        String accountId = null;
        InlineResponseDefault5 response = api.restapiV10AccountAccountIdDeviceGet(accountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get IBO Dialing Plans
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdDialingPlanGetTest() throws ApiException {
        String accountId = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault6 response = api.restapiV10AccountAccountIdDialingPlanGet(accountId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Active (Recent) Calls
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String direction = null;
        String type = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault2 response = api.restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet(accountId, extensionId, direction, type, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Contact by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String contactId = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDelete(accountId, extensionId, contactId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Contact by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String contactId = null;
        PersonalContactInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGet(accountId, extensionId, contactId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Contact by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String contactId = null;
        PersonalContactInfo body = null;
        PersonalContactInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPut(accountId, extensionId, contactId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Contact List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String phoneNumber = null;
        String startsWith = null;
        String sortBy = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault9 response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGet(accountId, extensionId, phoneNumber, startsWith, sortBy, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create New Contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        PersonalContactInfo body = null;
        PersonalContactInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Contact Group List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault10 response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Contact Group by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String groupId = null;
        GroupInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGet(accountId, extensionId, groupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Contacts Synchronization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String syncType = null;
        String syncToken = null;
        Integer perPage = null;
        Integer pageId = null;
        InlineResponseDefault8 response = api.restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGet(accountId, extensionId, syncType, syncToken, perPage, pageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Custom Answering Rule by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String answeringRuleId = null;
        AnsweringRuleInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGet(accountId, extensionId, answeringRuleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check User Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String permissionId = null;
        String targetExtensionId = null;
        InlineResponseDefault12 response = api.restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGet(accountId, extensionId, permissionId, targetExtensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get User Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault11 response = api.restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Blocked Number by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String blockedNumberId = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDelete(accountId, extensionId, blockedNumberId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Blocked Number by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String blockedNumberId = null;
        BlockedNumberInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGet(accountId, extensionId, blockedNumberId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Blocked Number Label
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String blockedNumberId = null;
        BlockedNumberInfo body = null;
        BlockedNumberInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPut(accountId, extensionId, blockedNumberId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Blocked Number List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault13 response = api.restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add New Blocked Number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        BlockedNumberInfo body = null;
        BlockedNumberInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get User Hours Setting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault14 response = api.restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Call Log Record by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String callLogId = null;
        CallLogInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet(accountId, extensionId, callLogId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Extension Call Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        DateTime dateTo = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdCallLogDelete(accountId, extensionId, dateTo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Call Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdCallLogGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String extensionNumber = null;
        String phoneNumber = null;
        String direction = null;
        String type = null;
        String view = null;
        Boolean withRecording = null;
        DateTime dateTo = null;
        DateTime dateFrom = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault2 response = api.restapiV10AccountAccountIdExtensionExtensionIdCallLogGet(accountId, extensionId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateTo, dateFrom, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Call Log Synchronization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String syncType = null;
        String syncToken = null;
        DateTime dateFrom = null;
        Integer recordCount = null;
        String statusGroup = null;
        InlineResponseDefault15 response = api.restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGet(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create and Send Pager Message
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body4 body = null;
        MessageInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Conferencing info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdConferencingGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String countryId = null;
        ConferencingInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdConferencingGet(accountId, extensionId, countryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Conferencing info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdConferencingPutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body5 body = null;
        ConferencingInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdConferencingPut(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Device List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdDeviceGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault16 response = api.restapiV10AccountAccountIdExtensionExtensionIdDeviceGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create and Send Fax Message
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdFaxPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body6 body = null;
        MessageInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdFaxPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Forwarding Numbers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault17 response = api.restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet(accountId, extensionId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add New Forwarding Number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body7 body = null;
        ForwardingNumberInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Info by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        ExtensionInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Grants
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdGrantGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault18 response = api.restapiV10AccountAccountIdExtensionExtensionIdGrantGet(accountId, extensionId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Meetings List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault19 response = api.restapiV10AccountAccountIdExtensionExtensionIdMeetingGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Meeting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String meetingId = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDelete(accountId, extensionId, meetingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * End Current Meeting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String meetingId = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPost(accountId, extensionId, meetingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Meeting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String meetingId = null;
        MeetingInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGet(accountId, extensionId, meetingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Meeting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String meetingId = null;
        Body9 body = null;
        MeetingInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPut(accountId, extensionId, meetingId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Meeting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body8 body = null;
        MeetingInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdMeetingPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Meeting Service Info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        InlineResponseDefault20 response = api.restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Message List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String availability = null;
        Long conversationId = null;
        DateTime dateFrom = null;
        DateTime dateTo = null;
        String direction = null;
        Boolean distinctConversations = null;
        String messageType = null;
        String readStatus = null;
        Integer page = null;
        Integer perPage = null;
        String phoneNumber = null;
        InlineResponseDefault21 response = api.restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Message Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String messageId = null;
        String attachmentId = null;
        byte[] response = api.restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(accountId, extensionId, messageId, attachmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Message by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String messageId = null;
        Boolean purge = null;
        Long conversationId = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete(accountId, extensionId, messageId, purge, conversationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Message by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String messageId = null;
        MessageInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet(accountId, extensionId, messageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Message by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String messageId = null;
        Body10 body = null;
        MessageInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut(accountId, extensionId, messageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Message Synchronization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Long conversationId = null;
        DateTime dateFrom = null;
        DateTime dateTo = null;
        String direction = null;
        Boolean distinctConversations = null;
        String messageType = null;
        Integer recordCount = null;
        String syncToken = null;
        String syncType = null;
        InlineResponseDefault22 response = api.restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGet(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Phone Numbers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String usageType = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault23 response = api.restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet(accountId, extensionId, usageType, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension Presence
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdPresenceGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        PresenceInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdPresenceGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Profile Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        byte[] response = api.restapiV10AccountAccountIdExtensionExtensionIdProfileImageGet(accountId, extensionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Profile Image (same as PUT)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        byte[] body = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdProfileImagePost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Profile Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        byte[] body = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdProfileImagePut(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Scaled Profile Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String scaleSize = null;
        byte[] response = api.restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGet(accountId, extensionId, scaleSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Extension by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdPutTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Object body = null;
        ExtensionInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdPut(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Initiate RingOut Call
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdRingoutPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body11 body = null;
        RingOutInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdRingoutPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel RingOut Call
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String ringoutId = null;
        api.restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete(accountId, extensionId, ringoutId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get RingOut Call Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        String ringoutId = null;
        RingOutInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet(accountId, extensionId, ringoutId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create and Send SMS Message
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionExtensionIdSmsPostTest() throws ApiException {
        String accountId = null;
        String extensionId = null;
        Body12 body = null;
        MessageInfo response = api.restapiV10AccountAccountIdExtensionExtensionIdSmsPost(accountId, extensionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Extension List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdExtensionGetTest() throws ApiException {
        String accountId = null;
        Integer page = null;
        Integer perPage = null;
        String status = null;
        String type = null;
        InlineResponseDefault7 response = api.restapiV10AccountAccountIdExtensionGet(accountId, page, perPage, status, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Info by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdGetTest() throws ApiException {
        String accountId = null;
        AccountInfo response = api.restapiV10AccountAccountIdGet(accountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Order by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdOrderOrderIdGetTest() throws ApiException {
        String accountId = null;
        String orderId = null;
        InlineResponseDefault25 response = api.restapiV10AccountAccountIdOrderOrderIdGet(accountId, orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create New Order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdOrderPostTest() throws ApiException {
        String accountId = null;
        Body13 body = null;
        InlineResponseDefault24 response = api.restapiV10AccountAccountIdOrderPost(accountId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Phone Numbers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdPhoneNumberGetTest() throws ApiException {
        String accountId = null;
        Integer page = null;
        Integer perPage = null;
        String usageType = null;
        InlineResponseDefault26 response = api.restapiV10AccountAccountIdPhoneNumberGet(accountId, page, perPage, usageType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Phone Number by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetTest() throws ApiException {
        String accountId = null;
        String phoneNumberId = null;
        PhoneNumberInfo response = api.restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet(accountId, phoneNumberId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Call Recording Content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdRecordingRecordingIdContentGetTest() throws ApiException {
        String accountId = null;
        String recordingId = null;
        byte[] response = api.restapiV10AccountAccountIdRecordingRecordingIdContentGet(accountId, recordingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Call Recording Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdRecordingRecordingIdGetTest() throws ApiException {
        String accountId = null;
        String recordingId = null;
        InlineResponseDefault27 response = api.restapiV10AccountAccountIdRecordingRecordingIdGet(accountId, recordingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Account Service Info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10AccountAccountIdServiceInfoGetTest() throws ApiException {
        String accountId = null;
        InlineResponseDefault28 response = api.restapiV10AccountAccountIdServiceInfoGet(accountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Custom Data by Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10ClientInfoCustomDataCustomDataKeyPutTest() throws ApiException {
        String customDataKey = null;
        Body14 body = null;
        InlineResponseDefault29 response = api.restapiV10ClientInfoCustomDataCustomDataKeyPut(customDataKey, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Country by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryCountryCountryIdGetTest() throws ApiException {
        String countryId = null;
        FullCountryInfo response = api.restapiV10DictionaryCountryCountryIdGet(countryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Country List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryCountryGetTest() throws ApiException {
        Boolean loginAllowed = null;
        Boolean numberSelling = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponseDefault30 response = api.restapiV10DictionaryCountryGet(loginAllowed, numberSelling, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Supported Language List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryLanguageGetTest() throws ApiException {
        InlineResponseDefault31 response = api.restapiV10DictionaryLanguageGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Language by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryLanguageLanguageIdGetTest() throws ApiException {
        String languageId = null;
        LanguageInfo response = api.restapiV10DictionaryLanguageLanguageIdGet(languageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Location List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryLocationGetTest() throws ApiException {
        String orderBy = null;
        Integer page = null;
        Integer perPage = null;
        String stateId = null;
        Boolean withNxx = null;
        InlineResponseDefault32 response = api.restapiV10DictionaryLocationGet(orderBy, page, perPage, stateId, withNxx);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get State/Province List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryStateGetTest() throws ApiException {
        Integer countryId = null;
        Integer page = null;
        Integer perPage = null;
        Boolean withPhoneNumbers = null;
        InlineResponseDefault33 response = api.restapiV10DictionaryStateGet(countryId, page, perPage, withPhoneNumbers);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get State/Province by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryStateStateIdGetTest() throws ApiException {
        String stateId = null;
        StateInfo response = api.restapiV10DictionaryStateStateIdGet(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Time Zone List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryTimezoneGetTest() throws ApiException {
        String page = null;
        String perPage = null;
        InlineResponseDefault34 response = api.restapiV10DictionaryTimezoneGet(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Time Zone by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10DictionaryTimezoneTimezoneIdGetTest() throws ApiException {
        String timezoneId = null;
        TimezoneInfo response = api.restapiV10DictionaryTimezoneTimezoneIdGet(timezoneId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get API Version Info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10GetTest() throws ApiException {
        VersionInfo response = api.restapiV10Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Parse Phone Number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10NumberParserParsePostTest() throws ApiException {
        String homeCountry = null;
        Boolean nationalAsPriority = null;
        Body15 body = null;
        InlineResponseDefault35 response = api.restapiV10NumberParserParsePost(homeCountry, nationalAsPriority, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Look up Phone Number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10NumberPoolLookupPostTest() throws ApiException {
        Integer areaCode = null;
        String countryCode = null;
        String countryId = null;
        String exclude = null;
        Boolean extendedSearch = null;
        String line = null;
        String numberPattern = null;
        String nxx = null;
        String npa = null;
        String paymentType = null;
        Integer perPage = null;
        Boolean smsEnabled = null;
        InlineResponseDefault36 response = api.restapiV10NumberPoolLookupPost(areaCode, countryCode, countryId, exclude, extendedSearch, line, numberPattern, nxx, npa, paymentType, perPage, smsEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reserve Phone Number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10NumberPoolReservePostTest() throws ApiException {
        Body16 body = null;
        InlineResponseDefault37 response = api.restapiV10NumberPoolReservePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create New Subscription
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10SubscriptionPostTest() throws ApiException {
        Boolean aggregated = null;
        Body17 body = null;
        SubscriptionInfo response = api.restapiV10SubscriptionPost(aggregated, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel Subscription by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10SubscriptionSubscriptionIdDeleteTest() throws ApiException {
        String subscriptionId = null;
        api.restapiV10SubscriptionSubscriptionIdDelete(subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Subscription by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10SubscriptionSubscriptionIdGetTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionInfo response = api.restapiV10SubscriptionSubscriptionIdGet(subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update/Renew Subscription by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restapiV10SubscriptionSubscriptionIdPutTest() throws ApiException {
        String subscriptionId = null;
        Boolean aggregated = null;
        Body18 body = null;
        SubscriptionInfo response = api.restapiV10SubscriptionSubscriptionIdPut(subscriptionId, aggregated, body);

        // TODO: test validations
    }
    
}

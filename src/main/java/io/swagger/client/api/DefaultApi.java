/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountInfo;
import io.swagger.client.model.AnsweringRuleInfo;
import io.swagger.client.model.BlockedNumberInfo;
import io.swagger.client.model.Body;
import io.swagger.client.model.Body1;
import io.swagger.client.model.Body10;
import io.swagger.client.model.Body11;
import io.swagger.client.model.Body12;
import io.swagger.client.model.Body13;
import io.swagger.client.model.Body14;
import io.swagger.client.model.Body15;
import io.swagger.client.model.Body16;
import io.swagger.client.model.Body17;
import io.swagger.client.model.Body18;
import io.swagger.client.model.Body2;
import io.swagger.client.model.Body3;
import io.swagger.client.model.Body4;
import io.swagger.client.model.Body5;
import io.swagger.client.model.Body6;
import io.swagger.client.model.Body7;
import io.swagger.client.model.Body8;
import io.swagger.client.model.Body9;
import io.swagger.client.model.CallLogInfo;
import io.swagger.client.model.ConferencingInfo;
import org.joda.time.DateTime;
import io.swagger.client.model.DeviceInfo;
import io.swagger.client.model.ExtensionInfo;
import io.swagger.client.model.ForwardingNumberInfo;
import io.swagger.client.model.FullCountryInfo;
import io.swagger.client.model.GroupInfo;
import io.swagger.client.model.InlineResponseDefault;
import io.swagger.client.model.InlineResponseDefault1;
import io.swagger.client.model.InlineResponseDefault10;
import io.swagger.client.model.InlineResponseDefault11;
import io.swagger.client.model.InlineResponseDefault12;
import io.swagger.client.model.InlineResponseDefault13;
import io.swagger.client.model.InlineResponseDefault14;
import io.swagger.client.model.InlineResponseDefault15;
import io.swagger.client.model.InlineResponseDefault16;
import io.swagger.client.model.InlineResponseDefault17;
import io.swagger.client.model.InlineResponseDefault18;
import io.swagger.client.model.InlineResponseDefault19;
import io.swagger.client.model.InlineResponseDefault2;
import io.swagger.client.model.InlineResponseDefault20;
import io.swagger.client.model.InlineResponseDefault21;
import io.swagger.client.model.InlineResponseDefault22;
import io.swagger.client.model.InlineResponseDefault23;
import io.swagger.client.model.InlineResponseDefault24;
import io.swagger.client.model.InlineResponseDefault25;
import io.swagger.client.model.InlineResponseDefault26;
import io.swagger.client.model.InlineResponseDefault27;
import io.swagger.client.model.InlineResponseDefault28;
import io.swagger.client.model.InlineResponseDefault29;
import io.swagger.client.model.InlineResponseDefault3;
import io.swagger.client.model.InlineResponseDefault30;
import io.swagger.client.model.InlineResponseDefault31;
import io.swagger.client.model.InlineResponseDefault32;
import io.swagger.client.model.InlineResponseDefault33;
import io.swagger.client.model.InlineResponseDefault34;
import io.swagger.client.model.InlineResponseDefault35;
import io.swagger.client.model.InlineResponseDefault36;
import io.swagger.client.model.InlineResponseDefault37;
import io.swagger.client.model.InlineResponseDefault4;
import io.swagger.client.model.InlineResponseDefault5;
import io.swagger.client.model.InlineResponseDefault6;
import io.swagger.client.model.InlineResponseDefault7;
import io.swagger.client.model.InlineResponseDefault8;
import io.swagger.client.model.InlineResponseDefault9;
import io.swagger.client.model.LanguageInfo;
import io.swagger.client.model.MeetingInfo;
import io.swagger.client.model.MessageInfo;
import io.swagger.client.model.PersonalContactInfo;
import io.swagger.client.model.PhoneNumberInfo;
import io.swagger.client.model.PresenceInfo;
import io.swagger.client.model.RingOutInfo;
import io.swagger.client.model.ServerInfo;
import io.swagger.client.model.StateInfo;
import io.swagger.client.model.SubscriptionInfo;
import io.swagger.client.model.TimezoneInfo;
import io.swagger.client.model.VersionInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for restapiGet */
    private com.squareup.okhttp.Call restapiGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Server Info
     * @return ServerInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerInfo restapiGet() throws ApiException {
        ApiResponse<ServerInfo> resp = restapiGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get Server Info
     * @return ApiResponse&lt;ServerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerInfo> restapiGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = restapiGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ServerInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Server Info
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiGetAsync(final ApiCallback<ServerInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiOauthAuthorizePost */
    private com.squareup.okhttp.Call restapiOauthAuthorizePostCall(Body body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiOauthAuthorizePostValidateBeforeCall(Body body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiOauthAuthorizePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OAuth2 Authorize
     * @param body  (optional)
     * @return InlineResponseDefault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault restapiOauthAuthorizePost(Body body) throws ApiException {
        ApiResponse<InlineResponseDefault> resp = restapiOauthAuthorizePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * OAuth2 Authorize
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault> restapiOauthAuthorizePostWithHttpInfo(Body body) throws ApiException {
        com.squareup.okhttp.Call call = restapiOauthAuthorizePostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2 Authorize
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiOauthAuthorizePostAsync(Body body, final ApiCallback<InlineResponseDefault> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiOauthAuthorizePostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiOauthRevokePost */
    private com.squareup.okhttp.Call restapiOauthRevokePostCall(Body1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/oauth/revoke".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiOauthRevokePostValidateBeforeCall(Body1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiOauthRevokePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OAuth2 Revoke Token
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiOauthRevokePost(Body1 body) throws ApiException {
        restapiOauthRevokePostWithHttpInfo(body);
    }

    /**
     * 
     * OAuth2 Revoke Token
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiOauthRevokePostWithHttpInfo(Body1 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiOauthRevokePostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * OAuth2 Revoke Token
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiOauthRevokePostAsync(Body1 body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiOauthRevokePostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiOauthTokenPost */
    private com.squareup.okhttp.Call restapiOauthTokenPostCall(Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/oauth/token".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiOauthTokenPostValidateBeforeCall(Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiOauthTokenPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OAuth2 Get Token
     * @param body  (optional)
     * @return InlineResponseDefault1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault1 restapiOauthTokenPost(Body2 body) throws ApiException {
        ApiResponse<InlineResponseDefault1> resp = restapiOauthTokenPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * OAuth2 Get Token
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault1> restapiOauthTokenPostWithHttpInfo(Body2 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiOauthTokenPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2 Get Token
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiOauthTokenPostAsync(Body2 body, final ApiCallback<InlineResponseDefault1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiOauthTokenPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdActiveCallsGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdActiveCallsGetCall(String accountId, String direction, String type, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/active-calls".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "direction", direction));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdActiveCallsGetValidateBeforeCall(String accountId, String direction, String type, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdActiveCallsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdActiveCallsGetCall(accountId, direction, type, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Active (Recent) Calls
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @return InlineResponseDefault2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault2 restapiV10AccountAccountIdActiveCallsGet(String accountId, String direction, String type, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault2> resp = restapiV10AccountAccountIdActiveCallsGetWithHttpInfo(accountId, direction, type, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Account Active (Recent) Calls
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @return ApiResponse&lt;InlineResponseDefault2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault2> restapiV10AccountAccountIdActiveCallsGetWithHttpInfo(String accountId, String direction, String type, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdActiveCallsGetValidateBeforeCall(accountId, direction, type, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Active (Recent) Calls
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdActiveCallsGetAsync(String accountId, String direction, String type, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdActiveCallsGetValidateBeforeCall(accountId, direction, type, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdBusinessAddressGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdBusinessAddressGetCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/business-address".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdBusinessAddressGetValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdBusinessAddressGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdBusinessAddressGetCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Company Business Address
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return InlineResponseDefault3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault3 restapiV10AccountAccountIdBusinessAddressGet(String accountId) throws ApiException {
        ApiResponse<InlineResponseDefault3> resp = restapiV10AccountAccountIdBusinessAddressGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * 
     * Get Company Business Address
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault3> restapiV10AccountAccountIdBusinessAddressGetWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdBusinessAddressGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Company Business Address
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdBusinessAddressGetAsync(String accountId, final ApiCallback<InlineResponseDefault3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdBusinessAddressGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdBusinessAddressPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdBusinessAddressPutCall(String accountId, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/business-address".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdBusinessAddressPutValidateBeforeCall(String accountId, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdBusinessAddressPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdBusinessAddressPutCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Company Business Address
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param body  (optional)
     * @return InlineResponseDefault3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault3 restapiV10AccountAccountIdBusinessAddressPut(String accountId, Body3 body) throws ApiException {
        ApiResponse<InlineResponseDefault3> resp = restapiV10AccountAccountIdBusinessAddressPutWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Company Business Address
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault3> restapiV10AccountAccountIdBusinessAddressPutWithHttpInfo(String accountId, Body3 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdBusinessAddressPutValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Company Business Address
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdBusinessAddressPutAsync(String accountId, Body3 body, final ApiCallback<InlineResponseDefault3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdBusinessAddressPutValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdCallLogCallLogIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdCallLogCallLogIdGetCall(String accountId, String callLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/call-log/{callLogId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "callLogId" + "\\}", apiClient.escapeString(callLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdCallLogCallLogIdGetValidateBeforeCall(String accountId, String callLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdCallLogCallLogIdGet(Async)");
        }
        
        // verify the required parameter 'callLogId' is set
        if (callLogId == null) {
            throw new ApiException("Missing the required parameter 'callLogId' when calling restapiV10AccountAccountIdCallLogCallLogIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdCallLogCallLogIdGetCall(accountId, callLogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Call Log Record by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callLogId Internal identifier of a call log record (required)
     * @return CallLogInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CallLogInfo restapiV10AccountAccountIdCallLogCallLogIdGet(String accountId, String callLogId) throws ApiException {
        ApiResponse<CallLogInfo> resp = restapiV10AccountAccountIdCallLogCallLogIdGetWithHttpInfo(accountId, callLogId);
        return resp.getData();
    }

    /**
     * 
     * Get Account Call Log Record by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callLogId Internal identifier of a call log record (required)
     * @return ApiResponse&lt;CallLogInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CallLogInfo> restapiV10AccountAccountIdCallLogCallLogIdGetWithHttpInfo(String accountId, String callLogId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdCallLogCallLogIdGetValidateBeforeCall(accountId, callLogId, null, null);
        Type localVarReturnType = new TypeToken<CallLogInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Call Log Record by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callLogId Internal identifier of a call log record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdCallLogCallLogIdGetAsync(String accountId, String callLogId, final ApiCallback<CallLogInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdCallLogCallLogIdGetValidateBeforeCall(accountId, callLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CallLogInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdCallLogGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdCallLogGetCall(String accountId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateFrom, DateTime dateTo, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/call-log".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (extensionNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "extensionNumber", extensionNumber));
        if (phoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phoneNumber", phoneNumber));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "direction", direction));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (view != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "view", view));
        if (withRecording != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withRecording", withRecording));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTo", dateTo));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdCallLogGetValidateBeforeCall(String accountId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateFrom, DateTime dateTo, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdCallLogGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdCallLogGetCall(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateFrom, dateTo, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionNumber Extension number of a user. If specified, returns call log for a particular extension only. Cannot be specified together with the phoneNumber filter (optional)
     * @param phoneNumber Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the mentioned phone number. Cannot be specified together with the extensionNumber filter (optional)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param view The default value is &#39;Simple&#39; for both account and extension call log (optional)
     * @param withRecording &#39;True&#39; if only recorded calls have to be returned (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. The default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @return InlineResponseDefault2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault2 restapiV10AccountAccountIdCallLogGet(String accountId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateFrom, DateTime dateTo, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault2> resp = restapiV10AccountAccountIdCallLogGetWithHttpInfo(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateFrom, dateTo, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Account Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionNumber Extension number of a user. If specified, returns call log for a particular extension only. Cannot be specified together with the phoneNumber filter (optional)
     * @param phoneNumber Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the mentioned phone number. Cannot be specified together with the extensionNumber filter (optional)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param view The default value is &#39;Simple&#39; for both account and extension call log (optional)
     * @param withRecording &#39;True&#39; if only recorded calls have to be returned (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. The default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @return ApiResponse&lt;InlineResponseDefault2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault2> restapiV10AccountAccountIdCallLogGetWithHttpInfo(String accountId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateFrom, DateTime dateTo, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdCallLogGetValidateBeforeCall(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateFrom, dateTo, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionNumber Extension number of a user. If specified, returns call log for a particular extension only. Cannot be specified together with the phoneNumber filter (optional)
     * @param phoneNumber Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the mentioned phone number. Cannot be specified together with the extensionNumber filter (optional)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param view The default value is &#39;Simple&#39; for both account and extension call log (optional)
     * @param withRecording &#39;True&#39; if only recorded calls have to be returned (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. The default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdCallLogGetAsync(String accountId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateFrom, DateTime dateTo, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdCallLogGetValidateBeforeCall(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateFrom, dateTo, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdDepartmentDepartmentIdMembersGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetCall(String accountId, String departmentId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/department/{departmentId}/members".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "departmentId" + "\\}", apiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetValidateBeforeCall(String accountId, String departmentId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdDepartmentDepartmentIdMembersGet(Async)");
        }
        
        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling restapiV10AccountAccountIdDepartmentDepartmentIdMembersGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetCall(accountId, departmentId, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Department Members
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param departmentId Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid) (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault4 restapiV10AccountAccountIdDepartmentDepartmentIdMembersGet(String accountId, String departmentId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault4> resp = restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetWithHttpInfo(accountId, departmentId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Department Members
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param departmentId Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid) (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault4> restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetWithHttpInfo(String accountId, String departmentId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetValidateBeforeCall(accountId, departmentId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault4>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Department Members
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param departmentId Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid) (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetAsync(String accountId, String departmentId, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault4> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDepartmentDepartmentIdMembersGetValidateBeforeCall(accountId, departmentId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault4>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdDeviceDeviceIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDeviceDeviceIdGetCall(String accountId, String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/device/{deviceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDeviceDeviceIdGetValidateBeforeCall(String accountId, String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdDeviceDeviceIdGet(Async)");
        }
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling restapiV10AccountAccountIdDeviceDeviceIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDeviceDeviceIdGetCall(accountId, deviceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Device by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param deviceId Internal identifier of a device (required)
     * @return DeviceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceInfo restapiV10AccountAccountIdDeviceDeviceIdGet(String accountId, String deviceId) throws ApiException {
        ApiResponse<DeviceInfo> resp = restapiV10AccountAccountIdDeviceDeviceIdGetWithHttpInfo(accountId, deviceId);
        return resp.getData();
    }

    /**
     * 
     * Get Device by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param deviceId Internal identifier of a device (required)
     * @return ApiResponse&lt;DeviceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceInfo> restapiV10AccountAccountIdDeviceDeviceIdGetWithHttpInfo(String accountId, String deviceId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDeviceDeviceIdGetValidateBeforeCall(accountId, deviceId, null, null);
        Type localVarReturnType = new TypeToken<DeviceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Device by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param deviceId Internal identifier of a device (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdDeviceDeviceIdGetAsync(String accountId, String deviceId, final ApiCallback<DeviceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDeviceDeviceIdGetValidateBeforeCall(accountId, deviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdDeviceGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDeviceGetCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/device".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDeviceGetValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdDeviceGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDeviceGetCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Device List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return InlineResponseDefault5
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault5 restapiV10AccountAccountIdDeviceGet(String accountId) throws ApiException {
        ApiResponse<InlineResponseDefault5> resp = restapiV10AccountAccountIdDeviceGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * 
     * Get Account Device List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault5&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault5> restapiV10AccountAccountIdDeviceGetWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDeviceGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault5>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Device List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdDeviceGetAsync(String accountId, final ApiCallback<InlineResponseDefault5> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDeviceGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault5>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdDialingPlanGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDialingPlanGetCall(String accountId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/dialing-plan".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdDialingPlanGetValidateBeforeCall(String accountId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdDialingPlanGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDialingPlanGetCall(accountId, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get IBO Dialing Plans
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault6 restapiV10AccountAccountIdDialingPlanGet(String accountId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault6> resp = restapiV10AccountAccountIdDialingPlanGetWithHttpInfo(accountId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get IBO Dialing Plans
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault6> restapiV10AccountAccountIdDialingPlanGetWithHttpInfo(String accountId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDialingPlanGetValidateBeforeCall(accountId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault6>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get IBO Dialing Plans
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdDialingPlanGetAsync(String accountId, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault6> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdDialingPlanGetValidateBeforeCall(accountId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault6>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetCall(String accountId, String extensionId, String direction, String type, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/active-calls".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "direction", direction));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetValidateBeforeCall(String accountId, String extensionId, String direction, String type, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetCall(accountId, extensionId, direction, type, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Active (Recent) Calls
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault2 restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet(String accountId, String extensionId, String direction, String type, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault2> resp = restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetWithHttpInfo(accountId, extensionId, direction, type, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Active (Recent) Calls
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault2> restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetWithHttpInfo(String accountId, String extensionId, String direction, String type, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetValidateBeforeCall(accountId, extensionId, direction, type, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Active (Recent) Calls
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetAsync(String accountId, String extensionId, String direction, String type, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetValidateBeforeCall(accountId, extensionId, direction, type, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDelete */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteCall(String accountId, String extensionId, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteValidateBeforeCall(String accountId, String extensionId, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDelete(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDelete(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteCall(accountId, extensionId, contactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDelete(String accountId, String extensionId, String contactId) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteWithHttpInfo(accountId, extensionId, contactId);
    }

    /**
     * 
     * Delete Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteWithHttpInfo(String accountId, String extensionId, String contactId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteValidateBeforeCall(accountId, extensionId, contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteAsync(String accountId, String extensionId, String contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdDeleteValidateBeforeCall(accountId, extensionId, contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetCall(String accountId, String extensionId, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetValidateBeforeCall(String accountId, String extensionId, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGet(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetCall(accountId, extensionId, contactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @return PersonalContactInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalContactInfo restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGet(String accountId, String extensionId, String contactId) throws ApiException {
        ApiResponse<PersonalContactInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetWithHttpInfo(accountId, extensionId, contactId);
        return resp.getData();
    }

    /**
     * 
     * Get Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @return ApiResponse&lt;PersonalContactInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalContactInfo> restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetWithHttpInfo(String accountId, String extensionId, String contactId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetValidateBeforeCall(accountId, extensionId, contactId, null, null);
        Type localVarReturnType = new TypeToken<PersonalContactInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetAsync(String accountId, String extensionId, String contactId, final ApiCallback<PersonalContactInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdGetValidateBeforeCall(accountId, extensionId, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalContactInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutCall(String accountId, String extensionId, String contactId, PersonalContactInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutValidateBeforeCall(String accountId, String extensionId, String contactId, PersonalContactInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPut(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutCall(accountId, extensionId, contactId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @param body  (optional)
     * @return PersonalContactInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalContactInfo restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPut(String accountId, String extensionId, String contactId, PersonalContactInfo body) throws ApiException {
        ApiResponse<PersonalContactInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutWithHttpInfo(accountId, extensionId, contactId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonalContactInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalContactInfo> restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutWithHttpInfo(String accountId, String extensionId, String contactId, PersonalContactInfo body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutValidateBeforeCall(accountId, extensionId, contactId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonalContactInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Contact by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param contactId Internal identifier of a contact record in the RingCentral database (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutAsync(String accountId, String extensionId, String contactId, PersonalContactInfo body, final ApiCallback<PersonalContactInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactContactIdPutValidateBeforeCall(accountId, extensionId, contactId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalContactInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetCall(String accountId, String extensionId, String phoneNumber, String startsWith, String sortBy, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (phoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phoneNumber", phoneNumber));
        if (startsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startsWith", startsWith));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetValidateBeforeCall(String accountId, String extensionId, String phoneNumber, String startsWith, String sortBy, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetCall(accountId, extensionId, phoneNumber, startsWith, sortBy, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Contact List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param phoneNumber Phone number in E.164 (11-digits) format with or without plus &#39;+&#39;. Multiple values are supported (optional)
     * @param startsWith If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)
     * @param sortBy Sorts results by the specified property. The default is &#39;First Name&#39; (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault9
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault9 restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGet(String accountId, String extensionId, String phoneNumber, String startsWith, String sortBy, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault9> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetWithHttpInfo(accountId, extensionId, phoneNumber, startsWith, sortBy, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Contact List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param phoneNumber Phone number in E.164 (11-digits) format with or without plus &#39;+&#39;. Multiple values are supported (optional)
     * @param startsWith If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)
     * @param sortBy Sorts results by the specified property. The default is &#39;First Name&#39; (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault9&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault9> restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetWithHttpInfo(String accountId, String extensionId, String phoneNumber, String startsWith, String sortBy, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetValidateBeforeCall(accountId, extensionId, phoneNumber, startsWith, sortBy, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault9>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Contact List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param phoneNumber Phone number in E.164 (11-digits) format with or without plus &#39;+&#39;. Multiple values are supported (optional)
     * @param startsWith If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive (optional)
     * @param sortBy Sorts results by the specified property. The default is &#39;First Name&#39; (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetAsync(String accountId, String extensionId, String phoneNumber, String startsWith, String sortBy, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault9> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactGetValidateBeforeCall(accountId, extensionId, phoneNumber, startsWith, sortBy, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault9>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostCall(String accountId, String extensionId, PersonalContactInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostValidateBeforeCall(String accountId, String extensionId, PersonalContactInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create New Contact
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return PersonalContactInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalContactInfo restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPost(String accountId, String extensionId, PersonalContactInfo body) throws ApiException {
        ApiResponse<PersonalContactInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Create New Contact
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonalContactInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalContactInfo> restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostWithHttpInfo(String accountId, String extensionId, PersonalContactInfo body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonalContactInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create New Contact
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostAsync(String accountId, String extensionId, PersonalContactInfo body, final ApiCallback<PersonalContactInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookContactPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalContactInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/group".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Contact Group List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault10
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault10 restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault10> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Contact Group List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault10&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault10> restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault10>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Contact Group List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault10> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault10>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetCall(String accountId, String extensionId, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/group/{groupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetValidateBeforeCall(String accountId, String extensionId, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGet(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetCall(accountId, extensionId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Contact Group by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param groupId Internal identifier of a group in an address book (required)
     * @return GroupInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupInfo restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGet(String accountId, String extensionId, String groupId) throws ApiException {
        ApiResponse<GroupInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetWithHttpInfo(accountId, extensionId, groupId);
        return resp.getData();
    }

    /**
     * 
     * Get Contact Group by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param groupId Internal identifier of a group in an address book (required)
     * @return ApiResponse&lt;GroupInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupInfo> restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetWithHttpInfo(String accountId, String extensionId, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetValidateBeforeCall(accountId, extensionId, groupId, null, null);
        Type localVarReturnType = new TypeToken<GroupInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Contact Group by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param groupId Internal identifier of a group in an address book (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetAsync(String accountId, String extensionId, String groupId, final ApiCallback<GroupInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookGroupGroupIdGetValidateBeforeCall(accountId, extensionId, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetCall(String accountId, String extensionId, String syncType, String syncToken, Integer perPage, Integer pageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book-sync".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (syncType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "syncType", syncType));
        if (syncToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "syncToken", syncToken));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (pageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageId", pageId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetValidateBeforeCall(String accountId, String extensionId, String syncType, String syncToken, Integer perPage, Integer pageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetCall(accountId, extensionId, syncType, syncToken, perPage, pageId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Contacts Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param syncType Type of synchronization. The default value is &#39;FSync&#39; (optional)
     * @param syncToken Value of syncToken property of the last sync request response (optional)
     * @param perPage Number of records per page to be returned. The max number of records is 250, which is also the default. For FSync — if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For ISync — if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)
     * @param pageId Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)
     * @return InlineResponseDefault8
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault8 restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGet(String accountId, String extensionId, String syncType, String syncToken, Integer perPage, Integer pageId) throws ApiException {
        ApiResponse<InlineResponseDefault8> resp = restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetWithHttpInfo(accountId, extensionId, syncType, syncToken, perPage, pageId);
        return resp.getData();
    }

    /**
     * 
     * Contacts Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param syncType Type of synchronization. The default value is &#39;FSync&#39; (optional)
     * @param syncToken Value of syncToken property of the last sync request response (optional)
     * @param perPage Number of records per page to be returned. The max number of records is 250, which is also the default. For FSync — if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For ISync — if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)
     * @param pageId Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)
     * @return ApiResponse&lt;InlineResponseDefault8&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault8> restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetWithHttpInfo(String accountId, String extensionId, String syncType, String syncToken, Integer perPage, Integer pageId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetValidateBeforeCall(accountId, extensionId, syncType, syncToken, perPage, pageId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault8>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Contacts Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param syncType Type of synchronization. The default value is &#39;FSync&#39; (optional)
     * @param syncToken Value of syncToken property of the last sync request response (optional)
     * @param perPage Number of records per page to be returned. The max number of records is 250, which is also the default. For FSync — if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For ISync — if the number of records exceeds the page size, the number of incoming changes to this number is limited (optional)
     * @param pageId Internal identifier of a page. It can be obtained from the &#39;nextPageId&#39; parameter passed in response body (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetAsync(String accountId, String extensionId, String syncType, String syncToken, Integer perPage, Integer pageId, final ApiCallback<InlineResponseDefault8> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAddressBookSyncGetValidateBeforeCall(accountId, extensionId, syncType, syncToken, perPage, pageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault8>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetCall(String accountId, String extensionId, String answeringRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{answeringRuleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "answeringRuleId" + "\\}", apiClient.escapeString(answeringRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetValidateBeforeCall(String accountId, String extensionId, String answeringRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGet(Async)");
        }
        
        // verify the required parameter 'answeringRuleId' is set
        if (answeringRuleId == null) {
            throw new ApiException("Missing the required parameter 'answeringRuleId' when calling restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetCall(accountId, extensionId, answeringRuleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Custom Answering Rule by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param answeringRuleId Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either business-hours-rule or after-hours-rule (required)
     * @return AnsweringRuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnsweringRuleInfo restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGet(String accountId, String extensionId, String answeringRuleId) throws ApiException {
        ApiResponse<AnsweringRuleInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetWithHttpInfo(accountId, extensionId, answeringRuleId);
        return resp.getData();
    }

    /**
     * 
     * Get Custom Answering Rule by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param answeringRuleId Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either business-hours-rule or after-hours-rule (required)
     * @return ApiResponse&lt;AnsweringRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnsweringRuleInfo> restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetWithHttpInfo(String accountId, String extensionId, String answeringRuleId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetValidateBeforeCall(accountId, extensionId, answeringRuleId, null, null);
        Type localVarReturnType = new TypeToken<AnsweringRuleInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Custom Answering Rule by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param answeringRuleId Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either business-hours-rule or after-hours-rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetAsync(String accountId, String extensionId, String answeringRuleId, final ApiCallback<AnsweringRuleInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAnsweringRuleAnsweringRuleIdGetValidateBeforeCall(accountId, extensionId, answeringRuleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnsweringRuleInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetCall(String accountId, String extensionId, String permissionId, String targetExtensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/authz-profile/check".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (permissionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "permissionId", permissionId));
        if (targetExtensionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "targetExtensionId", targetExtensionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetValidateBeforeCall(String accountId, String extensionId, String permissionId, String targetExtensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetCall(accountId, extensionId, permissionId, targetExtensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Check User Permissions
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param permissionId Permission to check (optional)
     * @param targetExtensionId Optional. Internal identifier of an extension for which user permissions are to be checked. The default value is the currently logged-in extension (optional)
     * @return InlineResponseDefault12
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault12 restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGet(String accountId, String extensionId, String permissionId, String targetExtensionId) throws ApiException {
        ApiResponse<InlineResponseDefault12> resp = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetWithHttpInfo(accountId, extensionId, permissionId, targetExtensionId);
        return resp.getData();
    }

    /**
     * 
     * Check User Permissions
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param permissionId Permission to check (optional)
     * @param targetExtensionId Optional. Internal identifier of an extension for which user permissions are to be checked. The default value is the currently logged-in extension (optional)
     * @return ApiResponse&lt;InlineResponseDefault12&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault12> restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetWithHttpInfo(String accountId, String extensionId, String permissionId, String targetExtensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetValidateBeforeCall(accountId, extensionId, permissionId, targetExtensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault12>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check User Permissions
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param permissionId Permission to check (optional)
     * @param targetExtensionId Optional. Internal identifier of an extension for which user permissions are to be checked. The default value is the currently logged-in extension (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetAsync(String accountId, String extensionId, String permissionId, String targetExtensionId, final ApiCallback<InlineResponseDefault12> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileCheckGetValidateBeforeCall(accountId, extensionId, permissionId, targetExtensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault12>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/authz-profile".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get User Permissions
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault11
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault11 restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault11> resp = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get User Permissions
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault11&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault11> restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault11>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get User Permissions
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault11> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdAuthzProfileGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault11>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDelete */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteCall(String accountId, String extensionId, String blockedNumberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/blocked-number/{blockedNumberId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "blockedNumberId" + "\\}", apiClient.escapeString(blockedNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteValidateBeforeCall(String accountId, String extensionId, String blockedNumberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDelete(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDelete(Async)");
        }
        
        // verify the required parameter 'blockedNumberId' is set
        if (blockedNumberId == null) {
            throw new ApiException("Missing the required parameter 'blockedNumberId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteCall(accountId, extensionId, blockedNumberId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Blocked Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDelete(String accountId, String extensionId, String blockedNumberId) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteWithHttpInfo(accountId, extensionId, blockedNumberId);
    }

    /**
     * 
     * Delete Blocked Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteWithHttpInfo(String accountId, String extensionId, String blockedNumberId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteValidateBeforeCall(accountId, extensionId, blockedNumberId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete Blocked Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteAsync(String accountId, String extensionId, String blockedNumberId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdDeleteValidateBeforeCall(accountId, extensionId, blockedNumberId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetCall(String accountId, String extensionId, String blockedNumberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/blocked-number/{blockedNumberId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "blockedNumberId" + "\\}", apiClient.escapeString(blockedNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetValidateBeforeCall(String accountId, String extensionId, String blockedNumberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGet(Async)");
        }
        
        // verify the required parameter 'blockedNumberId' is set
        if (blockedNumberId == null) {
            throw new ApiException("Missing the required parameter 'blockedNumberId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetCall(accountId, extensionId, blockedNumberId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Blocked Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @return BlockedNumberInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BlockedNumberInfo restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGet(String accountId, String extensionId, String blockedNumberId) throws ApiException {
        ApiResponse<BlockedNumberInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetWithHttpInfo(accountId, extensionId, blockedNumberId);
        return resp.getData();
    }

    /**
     * 
     * Get Blocked Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @return ApiResponse&lt;BlockedNumberInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BlockedNumberInfo> restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetWithHttpInfo(String accountId, String extensionId, String blockedNumberId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetValidateBeforeCall(accountId, extensionId, blockedNumberId, null, null);
        Type localVarReturnType = new TypeToken<BlockedNumberInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Blocked Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetAsync(String accountId, String extensionId, String blockedNumberId, final ApiCallback<BlockedNumberInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdGetValidateBeforeCall(accountId, extensionId, blockedNumberId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BlockedNumberInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutCall(String accountId, String extensionId, String blockedNumberId, BlockedNumberInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/blocked-number/{blockedNumberId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "blockedNumberId" + "\\}", apiClient.escapeString(blockedNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutValidateBeforeCall(String accountId, String extensionId, String blockedNumberId, BlockedNumberInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPut(Async)");
        }
        
        // verify the required parameter 'blockedNumberId' is set
        if (blockedNumberId == null) {
            throw new ApiException("Missing the required parameter 'blockedNumberId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutCall(accountId, extensionId, blockedNumberId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Blocked Number Label
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @param body  (optional)
     * @return BlockedNumberInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BlockedNumberInfo restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPut(String accountId, String extensionId, String blockedNumberId, BlockedNumberInfo body) throws ApiException {
        ApiResponse<BlockedNumberInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutWithHttpInfo(accountId, extensionId, blockedNumberId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Blocked Number Label
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BlockedNumberInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BlockedNumberInfo> restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutWithHttpInfo(String accountId, String extensionId, String blockedNumberId, BlockedNumberInfo body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutValidateBeforeCall(accountId, extensionId, blockedNumberId, body, null, null);
        Type localVarReturnType = new TypeToken<BlockedNumberInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Blocked Number Label
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param blockedNumberId Internal identifier of a blocked number list entry (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutAsync(String accountId, String extensionId, String blockedNumberId, BlockedNumberInfo body, final ApiCallback<BlockedNumberInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberBlockedNumberIdPutValidateBeforeCall(accountId, extensionId, blockedNumberId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BlockedNumberInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/blocked-number".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Blocked Number List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault13
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault13 restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault13> resp = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Blocked Number List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault13&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault13> restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault13>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Blocked Number List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault13> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault13>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostCall(String accountId, String extensionId, BlockedNumberInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/blocked-number".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostValidateBeforeCall(String accountId, String extensionId, BlockedNumberInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add New Blocked Number
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return BlockedNumberInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BlockedNumberInfo restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPost(String accountId, String extensionId, BlockedNumberInfo body) throws ApiException {
        ApiResponse<BlockedNumberInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Add New Blocked Number
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BlockedNumberInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BlockedNumberInfo> restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostWithHttpInfo(String accountId, String extensionId, BlockedNumberInfo body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<BlockedNumberInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add New Blocked Number
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostAsync(String accountId, String extensionId, BlockedNumberInfo body, final ApiCallback<BlockedNumberInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBlockedNumberPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BlockedNumberInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/business-hours".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get User Hours Setting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault14
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault14 restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault14> resp = restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get User Hours Setting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault14&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault14> restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault14>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get User Hours Setting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault14> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdBusinessHoursGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault14>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetCall(String accountId, String extensionId, String callLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log/{callLogId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "callLogId" + "\\}", apiClient.escapeString(callLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetValidateBeforeCall(String accountId, String extensionId, String callLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet(Async)");
        }
        
        // verify the required parameter 'callLogId' is set
        if (callLogId == null) {
            throw new ApiException("Missing the required parameter 'callLogId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetCall(accountId, extensionId, callLogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Call Log Record by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callLogId Internal identifier of a call log record (required)
     * @return CallLogInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CallLogInfo restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet(String accountId, String extensionId, String callLogId) throws ApiException {
        ApiResponse<CallLogInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetWithHttpInfo(accountId, extensionId, callLogId);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Call Log Record by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callLogId Internal identifier of a call log record (required)
     * @return ApiResponse&lt;CallLogInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CallLogInfo> restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetWithHttpInfo(String accountId, String extensionId, String callLogId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetValidateBeforeCall(accountId, extensionId, callLogId, null, null);
        Type localVarReturnType = new TypeToken<CallLogInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Call Log Record by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callLogId Internal identifier of a call log record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetAsync(String accountId, String extensionId, String callLogId, final ApiCallback<CallLogInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetValidateBeforeCall(accountId, extensionId, callLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CallLogInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdCallLogDelete */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteCall(String accountId, String extensionId, DateTime dateTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTo", dateTo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteValidateBeforeCall(String accountId, String extensionId, DateTime dateTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogDelete(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteCall(accountId, extensionId, dateTo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Extension Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param dateTo The end datetime for records deletion in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdCallLogDelete(String accountId, String extensionId, DateTime dateTo) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteWithHttpInfo(accountId, extensionId, dateTo);
    }

    /**
     * 
     * Delete Extension Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param dateTo The end datetime for records deletion in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteWithHttpInfo(String accountId, String extensionId, DateTime dateTo) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteValidateBeforeCall(accountId, extensionId, dateTo, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete Extension Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param dateTo The end datetime for records deletion in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteAsync(String accountId, String extensionId, DateTime dateTo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogDeleteValidateBeforeCall(accountId, extensionId, dateTo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdCallLogGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogGetCall(String accountId, String extensionId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateTo, DateTime dateFrom, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (extensionNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "extensionNumber", extensionNumber));
        if (phoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phoneNumber", phoneNumber));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "direction", direction));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (view != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "view", view));
        if (withRecording != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withRecording", withRecording));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTo", dateTo));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateFrom", dateFrom));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogGetValidateBeforeCall(String accountId, String extensionId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateTo, DateTime dateFrom, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogGetCall(accountId, extensionId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateTo, dateFrom, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param extensionNumber Extension number of a user. If specified, returns call log for a particular extension only. Cannot be specified together with the phoneNumber filter (optional)
     * @param phoneNumber Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the mentioned phone number. Cannot be specified together with the extensionNumber filter (optional)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param view The default value is &#39;Simple&#39; for both account and extension call log (optional)
     * @param withRecording &#39;True&#39; if only recorded calls have to be returned (optional)
     * @param dateTo The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault2 restapiV10AccountAccountIdExtensionExtensionIdCallLogGet(String accountId, String extensionId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateTo, DateTime dateFrom, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault2> resp = restapiV10AccountAccountIdExtensionExtensionIdCallLogGetWithHttpInfo(accountId, extensionId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateTo, dateFrom, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param extensionNumber Extension number of a user. If specified, returns call log for a particular extension only. Cannot be specified together with the phoneNumber filter (optional)
     * @param phoneNumber Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the mentioned phone number. Cannot be specified together with the extensionNumber filter (optional)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param view The default value is &#39;Simple&#39; for both account and extension call log (optional)
     * @param withRecording &#39;True&#39; if only recorded calls have to be returned (optional)
     * @param dateTo The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault2> restapiV10AccountAccountIdExtensionExtensionIdCallLogGetWithHttpInfo(String accountId, String extensionId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateTo, DateTime dateFrom, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogGetValidateBeforeCall(accountId, extensionId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateTo, dateFrom, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Call Log
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param extensionNumber Extension number of a user. If specified, returns call log for a particular extension only. Cannot be specified together with the phoneNumber filter (optional)
     * @param phoneNumber Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the mentioned phone number. Cannot be specified together with the extensionNumber filter (optional)
     * @param direction The direction for the result records. It is allowed to specify more than one direction. If not specified, both inbound and outbound records are returned. Multiple values are accepted (optional)
     * @param type Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted (optional)
     * @param view The default value is &#39;Simple&#39; for both account and extension call log (optional)
     * @param withRecording &#39;True&#39; if only recorded calls have to be returned (optional)
     * @param dateTo The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogGetAsync(String accountId, String extensionId, String extensionNumber, String phoneNumber, String direction, String type, String view, Boolean withRecording, DateTime dateTo, DateTime dateFrom, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogGetValidateBeforeCall(accountId, extensionId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateTo, dateFrom, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetCall(String accountId, String extensionId, String syncType, String syncToken, DateTime dateFrom, Integer recordCount, String statusGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log-sync".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (syncType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "syncType", syncType));
        if (syncToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "syncToken", syncToken));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateFrom", dateFrom));
        if (recordCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recordCount", recordCount));
        if (statusGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "statusGroup", statusGroup));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetValidateBeforeCall(String accountId, String extensionId, String syncType, String syncToken, DateTime dateFrom, Integer recordCount, String statusGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetCall(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Call Log Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param syncType Type of synchronization. &#39;FSync&#39; is a default value (optional)
     * @param syncToken Value of syncToken property of last sync request response (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)
     * @param recordCount For FSync the parameter is mandatory, it limits the number of records to be returned in response. For ISync it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)
     * @param statusGroup Type of calls to be returned. The default value is &#39;All&#39; (optional)
     * @return InlineResponseDefault15
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault15 restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGet(String accountId, String extensionId, String syncType, String syncToken, DateTime dateFrom, Integer recordCount, String statusGroup) throws ApiException {
        ApiResponse<InlineResponseDefault15> resp = restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetWithHttpInfo(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup);
        return resp.getData();
    }

    /**
     * 
     * Call Log Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param syncType Type of synchronization. &#39;FSync&#39; is a default value (optional)
     * @param syncToken Value of syncToken property of last sync request response (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)
     * @param recordCount For FSync the parameter is mandatory, it limits the number of records to be returned in response. For ISync it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)
     * @param statusGroup Type of calls to be returned. The default value is &#39;All&#39; (optional)
     * @return ApiResponse&lt;InlineResponseDefault15&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault15> restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetWithHttpInfo(String accountId, String extensionId, String syncType, String syncToken, DateTime dateFrom, Integer recordCount, String statusGroup) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetValidateBeforeCall(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault15>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call Log Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param syncType Type of synchronization. &#39;FSync&#39; is a default value (optional)
     * @param syncToken Value of syncToken property of last sync request response (optional)
     * @param dateFrom The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment (optional)
     * @param recordCount For FSync the parameter is mandatory, it limits the number of records to be returned in response. For ISync it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250 (optional)
     * @param statusGroup Type of calls to be returned. The default value is &#39;All&#39; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetAsync(String accountId, String extensionId, String syncType, String syncToken, DateTime dateFrom, Integer recordCount, String statusGroup, final ApiCallback<InlineResponseDefault15> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCallLogSyncGetValidateBeforeCall(accountId, extensionId, syncType, syncToken, dateFrom, recordCount, statusGroup, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault15>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostCall(String accountId, String extensionId, Body4 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/company-pager".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostValidateBeforeCall(String accountId, String extensionId, Body4 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create and Send Pager Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return MessageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageInfo restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost(String accountId, String extensionId, Body4 body) throws ApiException {
        ApiResponse<MessageInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Create and Send Pager Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;MessageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageInfo> restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostWithHttpInfo(String accountId, String extensionId, Body4 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create and Send Pager Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostAsync(String accountId, String extensionId, Body4 body, final ApiCallback<MessageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdConferencingGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdConferencingGetCall(String accountId, String extensionId, String countryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/conferencing".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (countryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "countryId", countryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdConferencingGetValidateBeforeCall(String accountId, String extensionId, String countryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdConferencingGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdConferencingGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdConferencingGetCall(accountId, extensionId, countryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Conferencing info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param countryId Internal identifier of a country. If not specified, the response is returned for the brand country (optional)
     * @return ConferencingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConferencingInfo restapiV10AccountAccountIdExtensionExtensionIdConferencingGet(String accountId, String extensionId, String countryId) throws ApiException {
        ApiResponse<ConferencingInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdConferencingGetWithHttpInfo(accountId, extensionId, countryId);
        return resp.getData();
    }

    /**
     * 
     * Get Conferencing info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param countryId Internal identifier of a country. If not specified, the response is returned for the brand country (optional)
     * @return ApiResponse&lt;ConferencingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConferencingInfo> restapiV10AccountAccountIdExtensionExtensionIdConferencingGetWithHttpInfo(String accountId, String extensionId, String countryId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdConferencingGetValidateBeforeCall(accountId, extensionId, countryId, null, null);
        Type localVarReturnType = new TypeToken<ConferencingInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Conferencing info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param countryId Internal identifier of a country. If not specified, the response is returned for the brand country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdConferencingGetAsync(String accountId, String extensionId, String countryId, final ApiCallback<ConferencingInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdConferencingGetValidateBeforeCall(accountId, extensionId, countryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConferencingInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdConferencingPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdConferencingPutCall(String accountId, String extensionId, Body5 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/conferencing".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdConferencingPutValidateBeforeCall(String accountId, String extensionId, Body5 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdConferencingPut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdConferencingPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdConferencingPutCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Conferencing info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ConferencingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConferencingInfo restapiV10AccountAccountIdExtensionExtensionIdConferencingPut(String accountId, String extensionId, Body5 body) throws ApiException {
        ApiResponse<ConferencingInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdConferencingPutWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Conferencing info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ConferencingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConferencingInfo> restapiV10AccountAccountIdExtensionExtensionIdConferencingPutWithHttpInfo(String accountId, String extensionId, Body5 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdConferencingPutValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<ConferencingInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Conferencing info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdConferencingPutAsync(String accountId, String extensionId, Body5 body, final ApiCallback<ConferencingInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdConferencingPutValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConferencingInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdDeviceGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdDeviceGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/device".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdDeviceGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdDeviceGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdDeviceGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdDeviceGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Device List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault16
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault16 restapiV10AccountAccountIdExtensionExtensionIdDeviceGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault16> resp = restapiV10AccountAccountIdExtensionExtensionIdDeviceGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Device List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault16&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault16> restapiV10AccountAccountIdExtensionExtensionIdDeviceGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdDeviceGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault16>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Device List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdDeviceGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault16> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdDeviceGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault16>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdFaxPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdFaxPostCall(String accountId, String extensionId, Body6 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/fax".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdFaxPostValidateBeforeCall(String accountId, String extensionId, Body6 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdFaxPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdFaxPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdFaxPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create and Send Fax Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return MessageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageInfo restapiV10AccountAccountIdExtensionExtensionIdFaxPost(String accountId, String extensionId, Body6 body) throws ApiException {
        ApiResponse<MessageInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdFaxPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Create and Send Fax Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;MessageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageInfo> restapiV10AccountAccountIdExtensionExtensionIdFaxPostWithHttpInfo(String accountId, String extensionId, Body6 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdFaxPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create and Send Fax Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdFaxPostAsync(String accountId, String extensionId, Body6 body, final ApiCallback<MessageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdFaxPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetCall(String accountId, String extensionId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetValidateBeforeCall(String accountId, String extensionId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetCall(accountId, extensionId, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Forwarding Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault17
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault17 restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet(String accountId, String extensionId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault17> resp = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetWithHttpInfo(accountId, extensionId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Forwarding Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault17&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault17> restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetWithHttpInfo(String accountId, String extensionId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetValidateBeforeCall(accountId, extensionId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault17>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Forwarding Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetAsync(String accountId, String extensionId, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault17> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetValidateBeforeCall(accountId, extensionId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault17>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostCall(String accountId, String extensionId, Body7 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostValidateBeforeCall(String accountId, String extensionId, Body7 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add New Forwarding Number
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ForwardingNumberInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ForwardingNumberInfo restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPost(String accountId, String extensionId, Body7 body) throws ApiException {
        ApiResponse<ForwardingNumberInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Add New Forwarding Number
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ForwardingNumberInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ForwardingNumberInfo> restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostWithHttpInfo(String accountId, String extensionId, Body7 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<ForwardingNumberInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add New Forwarding Number
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostAsync(String accountId, String extensionId, Body7 body, final ApiCallback<ForwardingNumberInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdForwardingNumberPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ForwardingNumberInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Info by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ExtensionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtensionInfo restapiV10AccountAccountIdExtensionExtensionIdGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<ExtensionInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Info by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;ExtensionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtensionInfo> restapiV10AccountAccountIdExtensionExtensionIdGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<ExtensionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Info by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdGetAsync(String accountId, String extensionId, final ApiCallback<ExtensionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtensionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdGrantGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdGrantGetCall(String accountId, String extensionId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/grant".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdGrantGetValidateBeforeCall(String accountId, String extensionId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdGrantGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdGrantGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdGrantGetCall(accountId, extensionId, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Grants
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault18
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault18 restapiV10AccountAccountIdExtensionExtensionIdGrantGet(String accountId, String extensionId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault18> resp = restapiV10AccountAccountIdExtensionExtensionIdGrantGetWithHttpInfo(accountId, extensionId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Grants
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault18&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault18> restapiV10AccountAccountIdExtensionExtensionIdGrantGetWithHttpInfo(String accountId, String extensionId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdGrantGetValidateBeforeCall(accountId, extensionId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault18>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Grants
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdGrantGetAsync(String accountId, String extensionId, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault18> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdGrantGetValidateBeforeCall(accountId, extensionId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault18>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Meetings List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault19
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault19 restapiV10AccountAccountIdExtensionExtensionIdMeetingGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault19> resp = restapiV10AccountAccountIdExtensionExtensionIdMeetingGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Meetings List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault19&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault19> restapiV10AccountAccountIdExtensionExtensionIdMeetingGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault19>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Meetings List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault19> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault19>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDelete */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteCall(String accountId, String extensionId, String meetingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "meetingId" + "\\}", apiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteValidateBeforeCall(String accountId, String extensionId, String meetingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDelete(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDelete(Async)");
        }
        
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteCall(accountId, extensionId, meetingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDelete(String accountId, String extensionId, String meetingId) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteWithHttpInfo(accountId, extensionId, meetingId);
    }

    /**
     * 
     * Delete Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteWithHttpInfo(String accountId, String extensionId, String meetingId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteValidateBeforeCall(accountId, extensionId, meetingId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteAsync(String accountId, String extensionId, String meetingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdDeleteValidateBeforeCall(accountId, extensionId, meetingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostCall(String accountId, String extensionId, String meetingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}/end".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "meetingId" + "\\}", apiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostValidateBeforeCall(String accountId, String extensionId, String meetingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPost(Async)");
        }
        
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostCall(accountId, extensionId, meetingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * End Current Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPost(String accountId, String extensionId, String meetingId) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostWithHttpInfo(accountId, extensionId, meetingId);
    }

    /**
     * 
     * End Current Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostWithHttpInfo(String accountId, String extensionId, String meetingId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostValidateBeforeCall(accountId, extensionId, meetingId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * End Current Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostAsync(String accountId, String extensionId, String meetingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdEndPostValidateBeforeCall(accountId, extensionId, meetingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetCall(String accountId, String extensionId, String meetingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "meetingId" + "\\}", apiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetValidateBeforeCall(String accountId, String extensionId, String meetingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGet(Async)");
        }
        
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetCall(accountId, extensionId, meetingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @return MeetingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MeetingInfo restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGet(String accountId, String extensionId, String meetingId) throws ApiException {
        ApiResponse<MeetingInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetWithHttpInfo(accountId, extensionId, meetingId);
        return resp.getData();
    }

    /**
     * 
     * Get Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @return ApiResponse&lt;MeetingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MeetingInfo> restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetWithHttpInfo(String accountId, String extensionId, String meetingId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetValidateBeforeCall(accountId, extensionId, meetingId, null, null);
        Type localVarReturnType = new TypeToken<MeetingInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetAsync(String accountId, String extensionId, String meetingId, final ApiCallback<MeetingInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdGetValidateBeforeCall(accountId, extensionId, meetingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MeetingInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutCall(String accountId, String extensionId, String meetingId, Body9 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "meetingId" + "\\}", apiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutValidateBeforeCall(String accountId, String extensionId, String meetingId, Body9 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPut(Async)");
        }
        
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutCall(accountId, extensionId, meetingId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @param body  (optional)
     * @return MeetingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MeetingInfo restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPut(String accountId, String extensionId, String meetingId, Body9 body) throws ApiException {
        ApiResponse<MeetingInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutWithHttpInfo(accountId, extensionId, meetingId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @param body  (optional)
     * @return ApiResponse&lt;MeetingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MeetingInfo> restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutWithHttpInfo(String accountId, String extensionId, String meetingId, Body9 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutValidateBeforeCall(accountId, extensionId, meetingId, body, null, null);
        Type localVarReturnType = new TypeToken<MeetingInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param meetingId Internal identifier of a meeting (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutAsync(String accountId, String extensionId, String meetingId, Body9 body, final ApiCallback<MeetingInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingMeetingIdPutValidateBeforeCall(accountId, extensionId, meetingId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MeetingInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingPostCall(String accountId, String extensionId, Body8 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingPostValidateBeforeCall(String accountId, String extensionId, Body8 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return MeetingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MeetingInfo restapiV10AccountAccountIdExtensionExtensionIdMeetingPost(String accountId, String extensionId, Body8 body) throws ApiException {
        ApiResponse<MeetingInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdMeetingPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Create Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;MeetingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MeetingInfo> restapiV10AccountAccountIdExtensionExtensionIdMeetingPostWithHttpInfo(String accountId, String extensionId, Body8 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<MeetingInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Meeting
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingPostAsync(String accountId, String extensionId, Body8 body, final ApiCallback<MeetingInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MeetingInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/service-info".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Meeting Service Info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return InlineResponseDefault20
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault20 restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<InlineResponseDefault20> resp = restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Meeting Service Info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault20&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault20> restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault20>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Meeting Service Info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetAsync(String accountId, String extensionId, final ApiCallback<InlineResponseDefault20> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMeetingServiceInfoGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault20>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetCall(String accountId, String extensionId, String availability, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, String readStatus, Integer page, Integer perPage, String phoneNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (availability != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "availability", availability));
        if (conversationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "conversationId", conversationId));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTo", dateTo));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "direction", direction));
        if (distinctConversations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distinctConversations", distinctConversations));
        if (messageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "messageType", messageType));
        if (readStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "readStatus", readStatus));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (phoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phoneNumber", phoneNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetValidateBeforeCall(String accountId, String extensionId, String availability, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, String readStatus, Integer page, Integer perPage, String phoneNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetCall(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Message List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param availability Specifies the availability status for the resulting messages. Default value is &#39;Alive&#39;. Multiple values are accepted (optional)
     * @param conversationId Specifies the conversation identifier for the resulting messages (optional)
     * @param dateFrom The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param direction The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)
     * @param distinctConversations If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)
     * @param messageType The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)
     * @param readStatus The read status for the resulting messages. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param phoneNumber The phone number. If specified, messages are returned for this particular phone number only (optional)
     * @return InlineResponseDefault21
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault21 restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet(String accountId, String extensionId, String availability, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, String readStatus, Integer page, Integer perPage, String phoneNumber) throws ApiException {
        ApiResponse<InlineResponseDefault21> resp = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetWithHttpInfo(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber);
        return resp.getData();
    }

    /**
     * 
     * Get Message List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param availability Specifies the availability status for the resulting messages. Default value is &#39;Alive&#39;. Multiple values are accepted (optional)
     * @param conversationId Specifies the conversation identifier for the resulting messages (optional)
     * @param dateFrom The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param direction The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)
     * @param distinctConversations If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)
     * @param messageType The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)
     * @param readStatus The read status for the resulting messages. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param phoneNumber The phone number. If specified, messages are returned for this particular phone number only (optional)
     * @return ApiResponse&lt;InlineResponseDefault21&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault21> restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetWithHttpInfo(String accountId, String extensionId, String availability, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, String readStatus, Integer page, Integer perPage, String phoneNumber) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetValidateBeforeCall(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault21>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Message List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param availability Specifies the availability status for the resulting messages. Default value is &#39;Alive&#39;. Multiple values are accepted (optional)
     * @param conversationId Specifies the conversation identifier for the resulting messages (optional)
     * @param dateFrom The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param direction The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)
     * @param distinctConversations If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)
     * @param messageType The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (optional)
     * @param readStatus The read status for the resulting messages. Multiple values are accepted (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param phoneNumber The phone number. If specified, messages are returned for this particular phone number only (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetAsync(String accountId, String extensionId, String availability, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, String readStatus, Integer page, Integer perPage, String phoneNumber, final ApiCallback<InlineResponseDefault21> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetValidateBeforeCall(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault21>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetCall(String accountId, String extensionId, String messageId, String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}/content/{attachmentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()))
        .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetValidateBeforeCall(String accountId, String extensionId, String messageId, String attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetCall(accountId, extensionId, messageId, attachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Message Attachment
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param attachmentId Internal identifier of a message attachment (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(String accountId, String extensionId, String messageId, String attachmentId) throws ApiException {
        ApiResponse<byte[]> resp = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetWithHttpInfo(accountId, extensionId, messageId, attachmentId);
        return resp.getData();
    }

    /**
     * 
     * Get Message Attachment
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param attachmentId Internal identifier of a message attachment (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetWithHttpInfo(String accountId, String extensionId, String messageId, String attachmentId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetValidateBeforeCall(accountId, extensionId, messageId, attachmentId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Message Attachment
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param attachmentId Internal identifier of a message attachment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetAsync(String accountId, String extensionId, String messageId, String attachmentId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetValidateBeforeCall(accountId, extensionId, messageId, attachmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteCall(String accountId, String extensionId, String messageId, Boolean purge, Long conversationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (purge != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "purge", purge));
        if (conversationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "conversationId", conversationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteValidateBeforeCall(String accountId, String extensionId, String messageId, Boolean purge, Long conversationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteCall(accountId, extensionId, messageId, purge, conversationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Delete Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param purge If the value is &#39;True&#39;, then the message is purged immediately with all the attachments. The default value is &#39;False&#39; (optional)
     * @param conversationId Internal identifier of a message thread (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete(String accountId, String extensionId, String messageId, Boolean purge, Long conversationId) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteWithHttpInfo(accountId, extensionId, messageId, purge, conversationId);
    }

    /**
     * 
     * Delete Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param purge If the value is &#39;True&#39;, then the message is purged immediately with all the attachments. The default value is &#39;False&#39; (optional)
     * @param conversationId Internal identifier of a message thread (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteWithHttpInfo(String accountId, String extensionId, String messageId, Boolean purge, Long conversationId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteValidateBeforeCall(accountId, extensionId, messageId, purge, conversationId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param purge If the value is &#39;True&#39;, then the message is purged immediately with all the attachments. The default value is &#39;False&#39; (optional)
     * @param conversationId Internal identifier of a message thread (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteAsync(String accountId, String extensionId, String messageId, Boolean purge, Long conversationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteValidateBeforeCall(accountId, extensionId, messageId, purge, conversationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetCall(String accountId, String extensionId, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetValidateBeforeCall(String accountId, String extensionId, String messageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetCall(accountId, extensionId, messageId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @return MessageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageInfo restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet(String accountId, String extensionId, String messageId) throws ApiException {
        ApiResponse<MessageInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetWithHttpInfo(accountId, extensionId, messageId);
        return resp.getData();
    }

    /**
     * 
     * Get Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @return ApiResponse&lt;MessageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageInfo> restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetWithHttpInfo(String accountId, String extensionId, String messageId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetValidateBeforeCall(accountId, extensionId, messageId, null, null);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetAsync(String accountId, String extensionId, String messageId, final ApiCallback<MessageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetValidateBeforeCall(accountId, extensionId, messageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutCall(String accountId, String extensionId, String messageId, Body10 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutValidateBeforeCall(String accountId, String extensionId, String messageId, Body10 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutCall(accountId, extensionId, messageId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param body  (optional)
     * @return MessageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageInfo restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut(String accountId, String extensionId, String messageId, Body10 body) throws ApiException {
        ApiResponse<MessageInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutWithHttpInfo(accountId, extensionId, messageId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param body  (optional)
     * @return ApiResponse&lt;MessageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageInfo> restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutWithHttpInfo(String accountId, String extensionId, String messageId, Body10 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutValidateBeforeCall(accountId, extensionId, messageId, body, null, null);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Message by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param messageId Internal identifier of a message (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutAsync(String accountId, String extensionId, String messageId, Body10 body, final ApiCallback<MessageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutValidateBeforeCall(accountId, extensionId, messageId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetCall(String accountId, String extensionId, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, Integer recordCount, String syncToken, String syncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-sync".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (conversationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "conversationId", conversationId));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTo", dateTo));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "direction", direction));
        if (distinctConversations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distinctConversations", distinctConversations));
        if (messageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "messageType", messageType));
        if (recordCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recordCount", recordCount));
        if (syncToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "syncToken", syncToken));
        if (syncType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "syncType", syncType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetValidateBeforeCall(String accountId, String extensionId, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, Integer recordCount, String syncToken, String syncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetCall(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Message Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param conversationId Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)
     * @param dateFrom The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param direction Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)
     * @param distinctConversations If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)
     * @param messageType Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)
     * @param recordCount Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)
     * @param syncToken Value of syncToken property of last sync request response (optional)
     * @param syncType Type of message synchronization (optional)
     * @return InlineResponseDefault22
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault22 restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGet(String accountId, String extensionId, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, Integer recordCount, String syncToken, String syncType) throws ApiException {
        ApiResponse<InlineResponseDefault22> resp = restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetWithHttpInfo(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType);
        return resp.getData();
    }

    /**
     * 
     * Message Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param conversationId Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)
     * @param dateFrom The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param direction Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)
     * @param distinctConversations If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)
     * @param messageType Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)
     * @param recordCount Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)
     * @param syncToken Value of syncToken property of last sync request response (optional)
     * @param syncType Type of message synchronization (optional)
     * @return ApiResponse&lt;InlineResponseDefault22&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault22> restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetWithHttpInfo(String accountId, String extensionId, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, Integer recordCount, String syncToken, String syncType) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetValidateBeforeCall(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault22>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Message Synchronization
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param conversationId Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only. (optional)
     * @param dateFrom The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours (optional)
     * @param dateTo The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time (optional)
     * @param direction Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (optional)
     * @param distinctConversations If &#39;True&#39;, then the latest messages per every conversation ID are returned (optional)
     * @param messageType Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted (optional)
     * @param recordCount Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified) (optional)
     * @param syncToken Value of syncToken property of last sync request response (optional)
     * @param syncType Type of message synchronization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetAsync(String accountId, String extensionId, Long conversationId, DateTime dateFrom, DateTime dateTo, String direction, Boolean distinctConversations, String messageType, Integer recordCount, String syncToken, String syncType, final ApiCallback<InlineResponseDefault22> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdMessageSyncGetValidateBeforeCall(accountId, extensionId, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, recordCount, syncToken, syncType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault22>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetCall(String accountId, String extensionId, String usageType, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/phone-number".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (usageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "usageType", usageType));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetValidateBeforeCall(String accountId, String extensionId, String usageType, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetCall(accountId, extensionId, usageType, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Phone Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param usageType Usage type of the phone number (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault23
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault23 restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet(String accountId, String extensionId, String usageType, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault23> resp = restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetWithHttpInfo(accountId, extensionId, usageType, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Phone Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param usageType Usage type of the phone number (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault23&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault23> restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetWithHttpInfo(String accountId, String extensionId, String usageType, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetValidateBeforeCall(accountId, extensionId, usageType, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault23>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Phone Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param usageType Usage type of the phone number (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetAsync(String accountId, String extensionId, String usageType, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault23> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetValidateBeforeCall(accountId, extensionId, usageType, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault23>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdPresenceGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPresenceGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/presence".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPresenceGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdPresenceGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdPresenceGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPresenceGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension Presence
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return PresenceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PresenceInfo restapiV10AccountAccountIdExtensionExtensionIdPresenceGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<PresenceInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdPresenceGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Extension Presence
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;PresenceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PresenceInfo> restapiV10AccountAccountIdExtensionExtensionIdPresenceGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPresenceGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<PresenceInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension Presence
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPresenceGetAsync(String accountId, String extensionId, final ApiCallback<PresenceInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPresenceGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PresenceInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdProfileImageGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetValidateBeforeCall(String accountId, String extensionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImageGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImageGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetCall(accountId, extensionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] restapiV10AccountAccountIdExtensionExtensionIdProfileImageGet(String accountId, String extensionId) throws ApiException {
        ApiResponse<byte[]> resp = restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetWithHttpInfo(accountId, extensionId);
        return resp.getData();
    }

    /**
     * 
     * Get Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetWithHttpInfo(String accountId, String extensionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetValidateBeforeCall(accountId, extensionId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetAsync(String accountId, String extensionId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImageGetValidateBeforeCall(accountId, extensionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdProfileImagePost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostCall(String accountId, String extensionId, byte[] body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostValidateBeforeCall(String accountId, String extensionId, byte[] body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImagePost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImagePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Profile Image (same as PUT)
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdProfileImagePost(String accountId, String extensionId, byte[] body) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostWithHttpInfo(accountId, extensionId, body);
    }

    /**
     * 
     * Update Profile Image (same as PUT)
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostWithHttpInfo(String accountId, String extensionId, byte[] body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostValidateBeforeCall(accountId, extensionId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update Profile Image (same as PUT)
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostAsync(String accountId, String extensionId, byte[] body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImagePostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdProfileImagePut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutCall(String accountId, String extensionId, byte[] body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutValidateBeforeCall(String accountId, String extensionId, byte[] body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImagePut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImagePut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdProfileImagePut(String accountId, String extensionId, byte[] body) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutWithHttpInfo(accountId, extensionId, body);
    }

    /**
     * 
     * Update Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutWithHttpInfo(String accountId, String extensionId, byte[] body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutValidateBeforeCall(accountId, extensionId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutAsync(String accountId, String extensionId, byte[] body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImagePutValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetCall(String accountId, String extensionId, String scaleSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image/{scaleSize}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "scaleSize" + "\\}", apiClient.escapeString(scaleSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetValidateBeforeCall(String accountId, String extensionId, String scaleSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGet(Async)");
        }
        
        // verify the required parameter 'scaleSize' is set
        if (scaleSize == null) {
            throw new ApiException("Missing the required parameter 'scaleSize' when calling restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetCall(accountId, extensionId, scaleSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Scaled Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param scaleSize Dimensions of a profile image which will be returned in response. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGet(String accountId, String extensionId, String scaleSize) throws ApiException {
        ApiResponse<byte[]> resp = restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetWithHttpInfo(accountId, extensionId, scaleSize);
        return resp.getData();
    }

    /**
     * 
     * Get Scaled Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param scaleSize Dimensions of a profile image which will be returned in response. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetWithHttpInfo(String accountId, String extensionId, String scaleSize) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetValidateBeforeCall(accountId, extensionId, scaleSize, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Scaled Profile Image
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param scaleSize Dimensions of a profile image which will be returned in response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetAsync(String accountId, String extensionId, String scaleSize, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdProfileImageScaleSizeGetValidateBeforeCall(accountId, extensionId, scaleSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdPut */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPutCall(String accountId, String extensionId, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPutValidateBeforeCall(String accountId, String extensionId, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdPut(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPutCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Extension by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ExtensionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtensionInfo restapiV10AccountAccountIdExtensionExtensionIdPut(String accountId, String extensionId, Object body) throws ApiException {
        ApiResponse<ExtensionInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdPutWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Update Extension by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ExtensionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtensionInfo> restapiV10AccountAccountIdExtensionExtensionIdPutWithHttpInfo(String accountId, String extensionId, Object body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPutValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<ExtensionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Extension by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdPutAsync(String accountId, String extensionId, Object body, final ApiCallback<ExtensionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdPutValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtensionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdRingoutPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutPostCall(String accountId, String extensionId, Body11 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutPostValidateBeforeCall(String accountId, String extensionId, Body11 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Initiate RingOut Call
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return RingOutInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RingOutInfo restapiV10AccountAccountIdExtensionExtensionIdRingoutPost(String accountId, String extensionId, Body11 body) throws ApiException {
        ApiResponse<RingOutInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdRingoutPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Initiate RingOut Call
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;RingOutInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RingOutInfo> restapiV10AccountAccountIdExtensionExtensionIdRingoutPostWithHttpInfo(String accountId, String extensionId, Body11 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<RingOutInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiate RingOut Call
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutPostAsync(String accountId, String extensionId, Body11 body, final ApiCallback<RingOutInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RingOutInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteCall(String accountId, String extensionId, String ringoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "ringoutId" + "\\}", apiClient.escapeString(ringoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteValidateBeforeCall(String accountId, String extensionId, String ringoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete(Async)");
        }
        
        // verify the required parameter 'ringoutId' is set
        if (ringoutId == null) {
            throw new ApiException("Missing the required parameter 'ringoutId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteCall(accountId, extensionId, ringoutId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cancel RingOut Call
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param ringoutId Internal identifier of a RingOut call (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete(String accountId, String extensionId, String ringoutId) throws ApiException {
        restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteWithHttpInfo(accountId, extensionId, ringoutId);
    }

    /**
     * 
     * Cancel RingOut Call
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param ringoutId Internal identifier of a RingOut call (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteWithHttpInfo(String accountId, String extensionId, String ringoutId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteValidateBeforeCall(accountId, extensionId, ringoutId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Cancel RingOut Call
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param ringoutId Internal identifier of a RingOut call (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteAsync(String accountId, String extensionId, String ringoutId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteValidateBeforeCall(accountId, extensionId, ringoutId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetCall(String accountId, String extensionId, String ringoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()))
        .replaceAll("\\{" + "ringoutId" + "\\}", apiClient.escapeString(ringoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetValidateBeforeCall(String accountId, String extensionId, String ringoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet(Async)");
        }
        
        // verify the required parameter 'ringoutId' is set
        if (ringoutId == null) {
            throw new ApiException("Missing the required parameter 'ringoutId' when calling restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetCall(accountId, extensionId, ringoutId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get RingOut Call Status
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param ringoutId Internal identifier of a RingOut call (required)
     * @return RingOutInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RingOutInfo restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet(String accountId, String extensionId, String ringoutId) throws ApiException {
        ApiResponse<RingOutInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetWithHttpInfo(accountId, extensionId, ringoutId);
        return resp.getData();
    }

    /**
     * 
     * Get RingOut Call Status
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param ringoutId Internal identifier of a RingOut call (required)
     * @return ApiResponse&lt;RingOutInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RingOutInfo> restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetWithHttpInfo(String accountId, String extensionId, String ringoutId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetValidateBeforeCall(accountId, extensionId, ringoutId, null, null);
        Type localVarReturnType = new TypeToken<RingOutInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get RingOut Call Status
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param ringoutId Internal identifier of a RingOut call (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetAsync(String accountId, String extensionId, String ringoutId, final ApiCallback<RingOutInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetValidateBeforeCall(accountId, extensionId, ringoutId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RingOutInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionExtensionIdSmsPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdSmsPostCall(String accountId, String extensionId, Body12 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension/{extensionId}/sms".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "extensionId" + "\\}", apiClient.escapeString(extensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdSmsPostValidateBeforeCall(String accountId, String extensionId, Body12 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionExtensionIdSmsPost(Async)");
        }
        
        // verify the required parameter 'extensionId' is set
        if (extensionId == null) {
            throw new ApiException("Missing the required parameter 'extensionId' when calling restapiV10AccountAccountIdExtensionExtensionIdSmsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdSmsPostCall(accountId, extensionId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create and Send SMS Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return MessageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageInfo restapiV10AccountAccountIdExtensionExtensionIdSmsPost(String accountId, String extensionId, Body12 body) throws ApiException {
        ApiResponse<MessageInfo> resp = restapiV10AccountAccountIdExtensionExtensionIdSmsPostWithHttpInfo(accountId, extensionId, body);
        return resp.getData();
    }

    /**
     * 
     * Create and Send SMS Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;MessageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageInfo> restapiV10AccountAccountIdExtensionExtensionIdSmsPostWithHttpInfo(String accountId, String extensionId, Body12 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdSmsPostValidateBeforeCall(accountId, extensionId, body, null, null);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create and Send SMS Message
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param extensionId Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionExtensionIdSmsPostAsync(String accountId, String extensionId, Body12 body, final ApiCallback<MessageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionExtensionIdSmsPostValidateBeforeCall(accountId, extensionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdExtensionGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionGetCall(String accountId, Integer page, Integer perPage, String status, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/extension".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionGetValidateBeforeCall(String accountId, Integer page, Integer perPage, String status, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdExtensionGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionGetCall(accountId, page, perPage, status, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Extension List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param status Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without extensionNumber are returned. If not specified, then all extensions are returned (optional)
     * @param type Extension type. Multiple values are supported (optional)
     * @return InlineResponseDefault7
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault7 restapiV10AccountAccountIdExtensionGet(String accountId, Integer page, Integer perPage, String status, String type) throws ApiException {
        ApiResponse<InlineResponseDefault7> resp = restapiV10AccountAccountIdExtensionGetWithHttpInfo(accountId, page, perPage, status, type);
        return resp.getData();
    }

    /**
     * 
     * Get Extension List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param status Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without extensionNumber are returned. If not specified, then all extensions are returned (optional)
     * @param type Extension type. Multiple values are supported (optional)
     * @return ApiResponse&lt;InlineResponseDefault7&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault7> restapiV10AccountAccountIdExtensionGetWithHttpInfo(String accountId, Integer page, Integer perPage, String status, String type) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionGetValidateBeforeCall(accountId, page, perPage, status, type, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault7>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Extension List
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param status Extension current state. Multiple values are supported. If &#39;Unassigned&#39; is specified, then extensions without extensionNumber are returned. If not specified, then all extensions are returned (optional)
     * @param type Extension type. Multiple values are supported (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdExtensionGetAsync(String accountId, Integer page, Integer perPage, String status, String type, final ApiCallback<InlineResponseDefault7> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdExtensionGetValidateBeforeCall(accountId, page, perPage, status, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault7>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdGetCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdGetValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdGetCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Info by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return AccountInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountInfo restapiV10AccountAccountIdGet(String accountId) throws ApiException {
        ApiResponse<AccountInfo> resp = restapiV10AccountAccountIdGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * 
     * Get Account Info by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return ApiResponse&lt;AccountInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountInfo> restapiV10AccountAccountIdGetWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Info by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdGetAsync(String accountId, final ApiCallback<AccountInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdOrderOrderIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdOrderOrderIdGetCall(String accountId, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/order/{orderId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdOrderOrderIdGetValidateBeforeCall(String accountId, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdOrderOrderIdGet(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling restapiV10AccountAccountIdOrderOrderIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdOrderOrderIdGetCall(accountId, orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Order by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param orderId Internal identifier of an order (required)
     * @return InlineResponseDefault25
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault25 restapiV10AccountAccountIdOrderOrderIdGet(String accountId, String orderId) throws ApiException {
        ApiResponse<InlineResponseDefault25> resp = restapiV10AccountAccountIdOrderOrderIdGetWithHttpInfo(accountId, orderId);
        return resp.getData();
    }

    /**
     * 
     * Get Order by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param orderId Internal identifier of an order (required)
     * @return ApiResponse&lt;InlineResponseDefault25&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault25> restapiV10AccountAccountIdOrderOrderIdGetWithHttpInfo(String accountId, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdOrderOrderIdGetValidateBeforeCall(accountId, orderId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault25>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Order by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param orderId Internal identifier of an order (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdOrderOrderIdGetAsync(String accountId, String orderId, final ApiCallback<InlineResponseDefault25> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdOrderOrderIdGetValidateBeforeCall(accountId, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault25>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdOrderPost */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdOrderPostCall(String accountId, Body13 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/order".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdOrderPostValidateBeforeCall(String accountId, Body13 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdOrderPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdOrderPostCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create New Order
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param body  (optional)
     * @return InlineResponseDefault24
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault24 restapiV10AccountAccountIdOrderPost(String accountId, Body13 body) throws ApiException {
        ApiResponse<InlineResponseDefault24> resp = restapiV10AccountAccountIdOrderPostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * 
     * Create New Order
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault24&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault24> restapiV10AccountAccountIdOrderPostWithHttpInfo(String accountId, Body13 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdOrderPostValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault24>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create New Order
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdOrderPostAsync(String accountId, Body13 body, final ApiCallback<InlineResponseDefault24> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdOrderPostValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault24>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdPhoneNumberGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdPhoneNumberGetCall(String accountId, Integer page, Integer perPage, String usageType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/phone-number".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (usageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "usageType", usageType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdPhoneNumberGetValidateBeforeCall(String accountId, Integer page, Integer perPage, String usageType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdPhoneNumberGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdPhoneNumberGetCall(accountId, page, perPage, usageType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Phone Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param usageType Usage type of the phone number (optional)
     * @return InlineResponseDefault26
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault26 restapiV10AccountAccountIdPhoneNumberGet(String accountId, Integer page, Integer perPage, String usageType) throws ApiException {
        ApiResponse<InlineResponseDefault26> resp = restapiV10AccountAccountIdPhoneNumberGetWithHttpInfo(accountId, page, perPage, usageType);
        return resp.getData();
    }

    /**
     * 
     * Get Account Phone Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param usageType Usage type of the phone number (optional)
     * @return ApiResponse&lt;InlineResponseDefault26&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault26> restapiV10AccountAccountIdPhoneNumberGetWithHttpInfo(String accountId, Integer page, Integer perPage, String usageType) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdPhoneNumberGetValidateBeforeCall(accountId, page, perPage, usageType, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault26>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Phone Numbers
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param usageType Usage type of the phone number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdPhoneNumberGetAsync(String accountId, Integer page, Integer perPage, String usageType, final ApiCallback<InlineResponseDefault26> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdPhoneNumberGetValidateBeforeCall(accountId, page, perPage, usageType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault26>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetCall(String accountId, String phoneNumberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/phone-number/{phoneNumberId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "phoneNumberId" + "\\}", apiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetValidateBeforeCall(String accountId, String phoneNumberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet(Async)");
        }
        
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetCall(accountId, phoneNumberId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Phone Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param phoneNumberId Internal identifier of a phone number (required)
     * @return PhoneNumberInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhoneNumberInfo restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet(String accountId, String phoneNumberId) throws ApiException {
        ApiResponse<PhoneNumberInfo> resp = restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetWithHttpInfo(accountId, phoneNumberId);
        return resp.getData();
    }

    /**
     * 
     * Get Phone Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param phoneNumberId Internal identifier of a phone number (required)
     * @return ApiResponse&lt;PhoneNumberInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhoneNumberInfo> restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetWithHttpInfo(String accountId, String phoneNumberId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetValidateBeforeCall(accountId, phoneNumberId, null, null);
        Type localVarReturnType = new TypeToken<PhoneNumberInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Phone Number by ID
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param phoneNumberId Internal identifier of a phone number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetAsync(String accountId, String phoneNumberId, final ApiCallback<PhoneNumberInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetValidateBeforeCall(accountId, phoneNumberId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhoneNumberInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdRecordingRecordingIdContentGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdRecordingRecordingIdContentGetCall(String accountId, String recordingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/recording/{recordingId}/content".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "recordingId" + "\\}", apiClient.escapeString(recordingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdRecordingRecordingIdContentGetValidateBeforeCall(String accountId, String recordingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdRecordingRecordingIdContentGet(Async)");
        }
        
        // verify the required parameter 'recordingId' is set
        if (recordingId == null) {
            throw new ApiException("Missing the required parameter 'recordingId' when calling restapiV10AccountAccountIdRecordingRecordingIdContentGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdRecordingRecordingIdContentGetCall(accountId, recordingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Call Recording Content
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param recordingId Internal identifier of recording (returned in Call Log) (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] restapiV10AccountAccountIdRecordingRecordingIdContentGet(String accountId, String recordingId) throws ApiException {
        ApiResponse<byte[]> resp = restapiV10AccountAccountIdRecordingRecordingIdContentGetWithHttpInfo(accountId, recordingId);
        return resp.getData();
    }

    /**
     * 
     * Get Call Recording Content
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param recordingId Internal identifier of recording (returned in Call Log) (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> restapiV10AccountAccountIdRecordingRecordingIdContentGetWithHttpInfo(String accountId, String recordingId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdRecordingRecordingIdContentGetValidateBeforeCall(accountId, recordingId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Call Recording Content
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param recordingId Internal identifier of recording (returned in Call Log) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdRecordingRecordingIdContentGetAsync(String accountId, String recordingId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdRecordingRecordingIdContentGetValidateBeforeCall(accountId, recordingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdRecordingRecordingIdGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdRecordingRecordingIdGetCall(String accountId, String recordingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/recording/{recordingId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "recordingId" + "\\}", apiClient.escapeString(recordingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdRecordingRecordingIdGetValidateBeforeCall(String accountId, String recordingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdRecordingRecordingIdGet(Async)");
        }
        
        // verify the required parameter 'recordingId' is set
        if (recordingId == null) {
            throw new ApiException("Missing the required parameter 'recordingId' when calling restapiV10AccountAccountIdRecordingRecordingIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdRecordingRecordingIdGetCall(accountId, recordingId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Call Recording Metadata
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param recordingId Internal identifier of recording (returned in Call Log) (required)
     * @return InlineResponseDefault27
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault27 restapiV10AccountAccountIdRecordingRecordingIdGet(String accountId, String recordingId) throws ApiException {
        ApiResponse<InlineResponseDefault27> resp = restapiV10AccountAccountIdRecordingRecordingIdGetWithHttpInfo(accountId, recordingId);
        return resp.getData();
    }

    /**
     * 
     * Get Call Recording Metadata
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param recordingId Internal identifier of recording (returned in Call Log) (required)
     * @return ApiResponse&lt;InlineResponseDefault27&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault27> restapiV10AccountAccountIdRecordingRecordingIdGetWithHttpInfo(String accountId, String recordingId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdRecordingRecordingIdGetValidateBeforeCall(accountId, recordingId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault27>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Call Recording Metadata
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param recordingId Internal identifier of recording (returned in Call Log) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdRecordingRecordingIdGetAsync(String accountId, String recordingId, final ApiCallback<InlineResponseDefault27> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdRecordingRecordingIdGetValidateBeforeCall(accountId, recordingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault27>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10AccountAccountIdServiceInfoGet */
    private com.squareup.okhttp.Call restapiV10AccountAccountIdServiceInfoGetCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/account/{accountId}/service-info".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10AccountAccountIdServiceInfoGetValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling restapiV10AccountAccountIdServiceInfoGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdServiceInfoGetCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Account Service Info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return InlineResponseDefault28
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault28 restapiV10AccountAccountIdServiceInfoGet(String accountId) throws ApiException {
        ApiResponse<InlineResponseDefault28> resp = restapiV10AccountAccountIdServiceInfoGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * 
     * Get Account Service Info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @return ApiResponse&lt;InlineResponseDefault28&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault28> restapiV10AccountAccountIdServiceInfoGetWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10AccountAccountIdServiceInfoGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault28>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Account Service Info
     * @param accountId Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10AccountAccountIdServiceInfoGetAsync(String accountId, final ApiCallback<InlineResponseDefault28> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10AccountAccountIdServiceInfoGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault28>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10ClientInfoCustomDataCustomDataKeyPut */
    private com.squareup.okhttp.Call restapiV10ClientInfoCustomDataCustomDataKeyPutCall(String customDataKey, Body14 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/client-info/custom-data/{customDataKey}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customDataKey" + "\\}", apiClient.escapeString(customDataKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10ClientInfoCustomDataCustomDataKeyPutValidateBeforeCall(String customDataKey, Body14 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customDataKey' is set
        if (customDataKey == null) {
            throw new ApiException("Missing the required parameter 'customDataKey' when calling restapiV10ClientInfoCustomDataCustomDataKeyPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10ClientInfoCustomDataCustomDataKeyPutCall(customDataKey, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update Custom Data by Key
     * @param customDataKey Custom data access key. The number of unique custom data keys is limited to 100 keys per extension, summarized for all the applications. For example, if you have created 50 custom data keys under the Android mobile client application for the particular extension, then logged in the iOS application and created another 50 keys, the web client application won&#39;t be allowed to create any custom data key for that extension (required)
     * @param body  (optional)
     * @return InlineResponseDefault29
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault29 restapiV10ClientInfoCustomDataCustomDataKeyPut(String customDataKey, Body14 body) throws ApiException {
        ApiResponse<InlineResponseDefault29> resp = restapiV10ClientInfoCustomDataCustomDataKeyPutWithHttpInfo(customDataKey, body);
        return resp.getData();
    }

    /**
     * 
     * Update Custom Data by Key
     * @param customDataKey Custom data access key. The number of unique custom data keys is limited to 100 keys per extension, summarized for all the applications. For example, if you have created 50 custom data keys under the Android mobile client application for the particular extension, then logged in the iOS application and created another 50 keys, the web client application won&#39;t be allowed to create any custom data key for that extension (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault29&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault29> restapiV10ClientInfoCustomDataCustomDataKeyPutWithHttpInfo(String customDataKey, Body14 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10ClientInfoCustomDataCustomDataKeyPutValidateBeforeCall(customDataKey, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault29>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Custom Data by Key
     * @param customDataKey Custom data access key. The number of unique custom data keys is limited to 100 keys per extension, summarized for all the applications. For example, if you have created 50 custom data keys under the Android mobile client application for the particular extension, then logged in the iOS application and created another 50 keys, the web client application won&#39;t be allowed to create any custom data key for that extension (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10ClientInfoCustomDataCustomDataKeyPutAsync(String customDataKey, Body14 body, final ApiCallback<InlineResponseDefault29> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10ClientInfoCustomDataCustomDataKeyPutValidateBeforeCall(customDataKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault29>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryCountryCountryIdGet */
    private com.squareup.okhttp.Call restapiV10DictionaryCountryCountryIdGetCall(String countryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/country/{countryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "countryId" + "\\}", apiClient.escapeString(countryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryCountryCountryIdGetValidateBeforeCall(String countryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'countryId' is set
        if (countryId == null) {
            throw new ApiException("Missing the required parameter 'countryId' when calling restapiV10DictionaryCountryCountryIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryCountryCountryIdGetCall(countryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Country by ID
     * @param countryId Internal identifier of a country (required)
     * @return FullCountryInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FullCountryInfo restapiV10DictionaryCountryCountryIdGet(String countryId) throws ApiException {
        ApiResponse<FullCountryInfo> resp = restapiV10DictionaryCountryCountryIdGetWithHttpInfo(countryId);
        return resp.getData();
    }

    /**
     * 
     * Get Country by ID
     * @param countryId Internal identifier of a country (required)
     * @return ApiResponse&lt;FullCountryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FullCountryInfo> restapiV10DictionaryCountryCountryIdGetWithHttpInfo(String countryId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryCountryCountryIdGetValidateBeforeCall(countryId, null, null);
        Type localVarReturnType = new TypeToken<FullCountryInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Country by ID
     * @param countryId Internal identifier of a country (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryCountryCountryIdGetAsync(String countryId, final ApiCallback<FullCountryInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryCountryCountryIdGetValidateBeforeCall(countryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FullCountryInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryCountryGet */
    private com.squareup.okhttp.Call restapiV10DictionaryCountryGetCall(Boolean loginAllowed, Boolean numberSelling, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/country".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (loginAllowed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "loginAllowed", loginAllowed));
        if (numberSelling != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "numberSelling", numberSelling));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryCountryGetValidateBeforeCall(Boolean loginAllowed, Boolean numberSelling, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryCountryGetCall(loginAllowed, numberSelling, page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Country List
     * @param loginAllowed Specifies whether login with the phone numbers of this country is enabled or not (optional)
     * @param numberSelling Specifies if RingCentral sells phone numbers of this country (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault30
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault30 restapiV10DictionaryCountryGet(Boolean loginAllowed, Boolean numberSelling, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponseDefault30> resp = restapiV10DictionaryCountryGetWithHttpInfo(loginAllowed, numberSelling, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Country List
     * @param loginAllowed Specifies whether login with the phone numbers of this country is enabled or not (optional)
     * @param numberSelling Specifies if RingCentral sells phone numbers of this country (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault30&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault30> restapiV10DictionaryCountryGetWithHttpInfo(Boolean loginAllowed, Boolean numberSelling, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryCountryGetValidateBeforeCall(loginAllowed, numberSelling, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault30>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Country List
     * @param loginAllowed Specifies whether login with the phone numbers of this country is enabled or not (optional)
     * @param numberSelling Specifies if RingCentral sells phone numbers of this country (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryCountryGetAsync(Boolean loginAllowed, Boolean numberSelling, Integer page, Integer perPage, final ApiCallback<InlineResponseDefault30> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryCountryGetValidateBeforeCall(loginAllowed, numberSelling, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault30>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryLanguageGet */
    private com.squareup.okhttp.Call restapiV10DictionaryLanguageGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/language".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryLanguageGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryLanguageGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Supported Language List
     * @return InlineResponseDefault31
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault31 restapiV10DictionaryLanguageGet() throws ApiException {
        ApiResponse<InlineResponseDefault31> resp = restapiV10DictionaryLanguageGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get Supported Language List
     * @return ApiResponse&lt;InlineResponseDefault31&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault31> restapiV10DictionaryLanguageGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryLanguageGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault31>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Supported Language List
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryLanguageGetAsync(final ApiCallback<InlineResponseDefault31> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryLanguageGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault31>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryLanguageLanguageIdGet */
    private com.squareup.okhttp.Call restapiV10DictionaryLanguageLanguageIdGetCall(String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/language/{languageId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "languageId" + "\\}", apiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryLanguageLanguageIdGetValidateBeforeCall(String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling restapiV10DictionaryLanguageLanguageIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryLanguageLanguageIdGetCall(languageId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Language by ID
     * @param languageId Internal identifier of a language (required)
     * @return LanguageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LanguageInfo restapiV10DictionaryLanguageLanguageIdGet(String languageId) throws ApiException {
        ApiResponse<LanguageInfo> resp = restapiV10DictionaryLanguageLanguageIdGetWithHttpInfo(languageId);
        return resp.getData();
    }

    /**
     * 
     * Get Language by ID
     * @param languageId Internal identifier of a language (required)
     * @return ApiResponse&lt;LanguageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LanguageInfo> restapiV10DictionaryLanguageLanguageIdGetWithHttpInfo(String languageId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryLanguageLanguageIdGetValidateBeforeCall(languageId, null, null);
        Type localVarReturnType = new TypeToken<LanguageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Language by ID
     * @param languageId Internal identifier of a language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryLanguageLanguageIdGetAsync(String languageId, final ApiCallback<LanguageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryLanguageLanguageIdGetValidateBeforeCall(languageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LanguageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryLocationGet */
    private com.squareup.okhttp.Call restapiV10DictionaryLocationGetCall(String orderBy, Integer page, Integer perPage, String stateId, Boolean withNxx, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/location".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "orderBy", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (stateId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stateId", stateId));
        if (withNxx != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withNxx", withNxx));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryLocationGetValidateBeforeCall(String orderBy, Integer page, Integer perPage, String stateId, Boolean withNxx, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryLocationGetCall(orderBy, page, perPage, stateId, withNxx, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Location List
     * @param orderBy Sorts results by the specified property. The default value is &#39;City&#39; (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param stateId Internal identifier of a state (optional)
     * @param withNxx Specifies if nxx codes are returned (optional)
     * @return InlineResponseDefault32
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault32 restapiV10DictionaryLocationGet(String orderBy, Integer page, Integer perPage, String stateId, Boolean withNxx) throws ApiException {
        ApiResponse<InlineResponseDefault32> resp = restapiV10DictionaryLocationGetWithHttpInfo(orderBy, page, perPage, stateId, withNxx);
        return resp.getData();
    }

    /**
     * 
     * Get Location List
     * @param orderBy Sorts results by the specified property. The default value is &#39;City&#39; (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param stateId Internal identifier of a state (optional)
     * @param withNxx Specifies if nxx codes are returned (optional)
     * @return ApiResponse&lt;InlineResponseDefault32&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault32> restapiV10DictionaryLocationGetWithHttpInfo(String orderBy, Integer page, Integer perPage, String stateId, Boolean withNxx) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryLocationGetValidateBeforeCall(orderBy, page, perPage, stateId, withNxx, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault32>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Location List
     * @param orderBy Sorts results by the specified property. The default value is &#39;City&#39; (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default. (optional)
     * @param stateId Internal identifier of a state (optional)
     * @param withNxx Specifies if nxx codes are returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryLocationGetAsync(String orderBy, Integer page, Integer perPage, String stateId, Boolean withNxx, final ApiCallback<InlineResponseDefault32> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryLocationGetValidateBeforeCall(orderBy, page, perPage, stateId, withNxx, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault32>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryStateGet */
    private com.squareup.okhttp.Call restapiV10DictionaryStateGetCall(Integer countryId, Integer page, Integer perPage, Boolean withPhoneNumbers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/state".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (countryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "countryId", countryId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (withPhoneNumbers != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withPhoneNumbers", withPhoneNumbers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryStateGetValidateBeforeCall(Integer countryId, Integer page, Integer perPage, Boolean withPhoneNumbers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryStateGetCall(countryId, page, perPage, withPhoneNumbers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get State/Province List
     * @param countryId Internal identifier of a country (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param withPhoneNumbers If &#39;True&#39;, the list of states with phone numbers available for buying is returned. The default value is &#39;False&#39; (optional)
     * @return InlineResponseDefault33
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault33 restapiV10DictionaryStateGet(Integer countryId, Integer page, Integer perPage, Boolean withPhoneNumbers) throws ApiException {
        ApiResponse<InlineResponseDefault33> resp = restapiV10DictionaryStateGetWithHttpInfo(countryId, page, perPage, withPhoneNumbers);
        return resp.getData();
    }

    /**
     * 
     * Get State/Province List
     * @param countryId Internal identifier of a country (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param withPhoneNumbers If &#39;True&#39;, the list of states with phone numbers available for buying is returned. The default value is &#39;False&#39; (optional)
     * @return ApiResponse&lt;InlineResponseDefault33&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault33> restapiV10DictionaryStateGetWithHttpInfo(Integer countryId, Integer page, Integer perPage, Boolean withPhoneNumbers) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryStateGetValidateBeforeCall(countryId, page, perPage, withPhoneNumbers, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault33>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get State/Province List
     * @param countryId Internal identifier of a country (optional)
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39;. (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param withPhoneNumbers If &#39;True&#39;, the list of states with phone numbers available for buying is returned. The default value is &#39;False&#39; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryStateGetAsync(Integer countryId, Integer page, Integer perPage, Boolean withPhoneNumbers, final ApiCallback<InlineResponseDefault33> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryStateGetValidateBeforeCall(countryId, page, perPage, withPhoneNumbers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault33>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryStateStateIdGet */
    private com.squareup.okhttp.Call restapiV10DictionaryStateStateIdGetCall(String stateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/state/{stateId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "stateId" + "\\}", apiClient.escapeString(stateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryStateStateIdGetValidateBeforeCall(String stateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stateId' is set
        if (stateId == null) {
            throw new ApiException("Missing the required parameter 'stateId' when calling restapiV10DictionaryStateStateIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryStateStateIdGetCall(stateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get State/Province by ID
     * @param stateId Internal identifier of a state (required)
     * @return StateInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StateInfo restapiV10DictionaryStateStateIdGet(String stateId) throws ApiException {
        ApiResponse<StateInfo> resp = restapiV10DictionaryStateStateIdGetWithHttpInfo(stateId);
        return resp.getData();
    }

    /**
     * 
     * Get State/Province by ID
     * @param stateId Internal identifier of a state (required)
     * @return ApiResponse&lt;StateInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StateInfo> restapiV10DictionaryStateStateIdGetWithHttpInfo(String stateId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryStateStateIdGetValidateBeforeCall(stateId, null, null);
        Type localVarReturnType = new TypeToken<StateInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get State/Province by ID
     * @param stateId Internal identifier of a state (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryStateStateIdGetAsync(String stateId, final ApiCallback<StateInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryStateStateIdGetValidateBeforeCall(stateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StateInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryTimezoneGet */
    private com.squareup.okhttp.Call restapiV10DictionaryTimezoneGetCall(String page, String perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/timezone".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryTimezoneGetValidateBeforeCall(String page, String perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryTimezoneGetCall(page, perPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Time Zone List
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return InlineResponseDefault34
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault34 restapiV10DictionaryTimezoneGet(String page, String perPage) throws ApiException {
        ApiResponse<InlineResponseDefault34> resp = restapiV10DictionaryTimezoneGetWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * Get Time Zone List
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @return ApiResponse&lt;InlineResponseDefault34&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault34> restapiV10DictionaryTimezoneGetWithHttpInfo(String page, String perPage) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryTimezoneGetValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault34>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Time Zone List
     * @param page Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryTimezoneGetAsync(String page, String perPage, final ApiCallback<InlineResponseDefault34> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryTimezoneGetValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault34>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10DictionaryTimezoneTimezoneIdGet */
    private com.squareup.okhttp.Call restapiV10DictionaryTimezoneTimezoneIdGetCall(String timezoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/dictionary/timezone/{timezoneId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "timezoneId" + "\\}", apiClient.escapeString(timezoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10DictionaryTimezoneTimezoneIdGetValidateBeforeCall(String timezoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'timezoneId' is set
        if (timezoneId == null) {
            throw new ApiException("Missing the required parameter 'timezoneId' when calling restapiV10DictionaryTimezoneTimezoneIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10DictionaryTimezoneTimezoneIdGetCall(timezoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Time Zone by ID
     * @param timezoneId Internal identifier of a timezone (required)
     * @return TimezoneInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimezoneInfo restapiV10DictionaryTimezoneTimezoneIdGet(String timezoneId) throws ApiException {
        ApiResponse<TimezoneInfo> resp = restapiV10DictionaryTimezoneTimezoneIdGetWithHttpInfo(timezoneId);
        return resp.getData();
    }

    /**
     * 
     * Get Time Zone by ID
     * @param timezoneId Internal identifier of a timezone (required)
     * @return ApiResponse&lt;TimezoneInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimezoneInfo> restapiV10DictionaryTimezoneTimezoneIdGetWithHttpInfo(String timezoneId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10DictionaryTimezoneTimezoneIdGetValidateBeforeCall(timezoneId, null, null);
        Type localVarReturnType = new TypeToken<TimezoneInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Time Zone by ID
     * @param timezoneId Internal identifier of a timezone (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10DictionaryTimezoneTimezoneIdGetAsync(String timezoneId, final ApiCallback<TimezoneInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10DictionaryTimezoneTimezoneIdGetValidateBeforeCall(timezoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimezoneInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10Get */
    private com.squareup.okhttp.Call restapiV10GetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10GetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10GetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get API Version Info
     * @return VersionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionInfo restapiV10Get() throws ApiException {
        ApiResponse<VersionInfo> resp = restapiV10GetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get API Version Info
     * @return ApiResponse&lt;VersionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionInfo> restapiV10GetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = restapiV10GetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<VersionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get API Version Info
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10GetAsync(final ApiCallback<VersionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10GetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10NumberParserParsePost */
    private com.squareup.okhttp.Call restapiV10NumberParserParsePostCall(String homeCountry, Boolean nationalAsPriority, Body15 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/number-parser/parse".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (homeCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "homeCountry", homeCountry));
        if (nationalAsPriority != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nationalAsPriority", nationalAsPriority));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10NumberParserParsePostValidateBeforeCall(String homeCountry, Boolean nationalAsPriority, Body15 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10NumberParserParsePostCall(homeCountry, nationalAsPriority, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Parse Phone Number
     * @param homeCountry Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)
     * @param nationalAsPriority The default value is \&quot;False\&quot;. If \&quot;True\&quot;, the numbers that are closer to the home country are given higher priority (optional)
     * @param body  (optional)
     * @return InlineResponseDefault35
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault35 restapiV10NumberParserParsePost(String homeCountry, Boolean nationalAsPriority, Body15 body) throws ApiException {
        ApiResponse<InlineResponseDefault35> resp = restapiV10NumberParserParsePostWithHttpInfo(homeCountry, nationalAsPriority, body);
        return resp.getData();
    }

    /**
     * 
     * Parse Phone Number
     * @param homeCountry Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)
     * @param nationalAsPriority The default value is \&quot;False\&quot;. If \&quot;True\&quot;, the numbers that are closer to the home country are given higher priority (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault35&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault35> restapiV10NumberParserParsePostWithHttpInfo(String homeCountry, Boolean nationalAsPriority, Body15 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10NumberParserParsePostValidateBeforeCall(homeCountry, nationalAsPriority, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault35>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Parse Phone Number
     * @param homeCountry Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user&#39;s home country or brand country, if the user is undefined (optional)
     * @param nationalAsPriority The default value is \&quot;False\&quot;. If \&quot;True\&quot;, the numbers that are closer to the home country are given higher priority (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10NumberParserParsePostAsync(String homeCountry, Boolean nationalAsPriority, Body15 body, final ApiCallback<InlineResponseDefault35> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10NumberParserParsePostValidateBeforeCall(homeCountry, nationalAsPriority, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault35>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10NumberPoolLookupPost */
    private com.squareup.okhttp.Call restapiV10NumberPoolLookupPostCall(Integer areaCode, String countryCode, String countryId, String exclude, Boolean extendedSearch, String line, String numberPattern, String nxx, String npa, String paymentType, Integer perPage, Boolean smsEnabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/number-pool/lookup".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (areaCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "areaCode", areaCode));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "countryCode", countryCode));
        if (countryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "countryId", countryId));
        if (exclude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exclude", exclude));
        if (extendedSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "extendedSearch", extendedSearch));
        if (line != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "line", line));
        if (numberPattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "numberPattern", numberPattern));
        if (nxx != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nxx", nxx));
        if (npa != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "npa", npa));
        if (paymentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "paymentType", paymentType));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "perPage", perPage));
        if (smsEnabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "smsEnabled", smsEnabled));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10NumberPoolLookupPostValidateBeforeCall(Integer areaCode, String countryCode, String countryId, String exclude, Boolean extendedSearch, String line, String numberPattern, String nxx, String npa, String paymentType, Integer perPage, Boolean smsEnabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10NumberPoolLookupPostCall(areaCode, countryCode, countryId, exclude, extendedSearch, line, numberPattern, nxx, npa, paymentType, perPage, smsEnabled, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Look up Phone Number
     * @param areaCode Area code of the location (optional)
     * @param countryCode Two-letter country code, complying with the ISO standard (optional)
     * @param countryId Internal identifier of a country; &#39;1&#39;- the US; &#39;39&#39; - Canada; &#39;224&#39; - the UK. The default value is &#39;1&#39; (optional)
     * @param exclude A string of digits (one and more) that should not appear among the last four digits (line part) of the phone numbers that will be returned. It is possible to specify several exclude parameters. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified) (optional)
     * @param extendedSearch If the value is &#39;False&#39;, then the returned numbers exactly correspond to the specified NXX, NPA and LINE or countryCode, areaCode and numberPattern parameters. If the value is &#39;True&#39;, then the resulting numbers are ranked and returned with the rank attribute values (1-10). The default value is &#39;False&#39; (optional)
     * @param line LINE pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 4 characters) (optional)
     * @param numberPattern Phone number pattern (for wildcard or vanity search). For NANP countries (US, Canada) is concatenation of nxx (the first three digits) and line. If the first three characters are specified as not digits (e.g. 5** or CAT) then parameter extendedSearch will be ignored. (optional)
     * @param nxx NXX pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 3 characters) (optional)
     * @param npa Area code (mandatory). For example, 800, 844, 855, 866, 877, 888 for North America; and 647 for Canada (optional)
     * @param paymentType Payment type. Default is &#39;Local&#39; (it should correlate with the npa provided) (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;10&#39; by default (optional)
     * @param smsEnabled Specifies if SMS activation is available for the number. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified). If not specified, the value is null. (optional)
     * @return InlineResponseDefault36
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault36 restapiV10NumberPoolLookupPost(Integer areaCode, String countryCode, String countryId, String exclude, Boolean extendedSearch, String line, String numberPattern, String nxx, String npa, String paymentType, Integer perPage, Boolean smsEnabled) throws ApiException {
        ApiResponse<InlineResponseDefault36> resp = restapiV10NumberPoolLookupPostWithHttpInfo(areaCode, countryCode, countryId, exclude, extendedSearch, line, numberPattern, nxx, npa, paymentType, perPage, smsEnabled);
        return resp.getData();
    }

    /**
     * 
     * Look up Phone Number
     * @param areaCode Area code of the location (optional)
     * @param countryCode Two-letter country code, complying with the ISO standard (optional)
     * @param countryId Internal identifier of a country; &#39;1&#39;- the US; &#39;39&#39; - Canada; &#39;224&#39; - the UK. The default value is &#39;1&#39; (optional)
     * @param exclude A string of digits (one and more) that should not appear among the last four digits (line part) of the phone numbers that will be returned. It is possible to specify several exclude parameters. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified) (optional)
     * @param extendedSearch If the value is &#39;False&#39;, then the returned numbers exactly correspond to the specified NXX, NPA and LINE or countryCode, areaCode and numberPattern parameters. If the value is &#39;True&#39;, then the resulting numbers are ranked and returned with the rank attribute values (1-10). The default value is &#39;False&#39; (optional)
     * @param line LINE pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 4 characters) (optional)
     * @param numberPattern Phone number pattern (for wildcard or vanity search). For NANP countries (US, Canada) is concatenation of nxx (the first three digits) and line. If the first three characters are specified as not digits (e.g. 5** or CAT) then parameter extendedSearch will be ignored. (optional)
     * @param nxx NXX pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 3 characters) (optional)
     * @param npa Area code (mandatory). For example, 800, 844, 855, 866, 877, 888 for North America; and 647 for Canada (optional)
     * @param paymentType Payment type. Default is &#39;Local&#39; (it should correlate with the npa provided) (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;10&#39; by default (optional)
     * @param smsEnabled Specifies if SMS activation is available for the number. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified). If not specified, the value is null. (optional)
     * @return ApiResponse&lt;InlineResponseDefault36&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault36> restapiV10NumberPoolLookupPostWithHttpInfo(Integer areaCode, String countryCode, String countryId, String exclude, Boolean extendedSearch, String line, String numberPattern, String nxx, String npa, String paymentType, Integer perPage, Boolean smsEnabled) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10NumberPoolLookupPostValidateBeforeCall(areaCode, countryCode, countryId, exclude, extendedSearch, line, numberPattern, nxx, npa, paymentType, perPage, smsEnabled, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault36>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Look up Phone Number
     * @param areaCode Area code of the location (optional)
     * @param countryCode Two-letter country code, complying with the ISO standard (optional)
     * @param countryId Internal identifier of a country; &#39;1&#39;- the US; &#39;39&#39; - Canada; &#39;224&#39; - the UK. The default value is &#39;1&#39; (optional)
     * @param exclude A string of digits (one and more) that should not appear among the last four digits (line part) of the phone numbers that will be returned. It is possible to specify several exclude parameters. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified) (optional)
     * @param extendedSearch If the value is &#39;False&#39;, then the returned numbers exactly correspond to the specified NXX, NPA and LINE or countryCode, areaCode and numberPattern parameters. If the value is &#39;True&#39;, then the resulting numbers are ranked and returned with the rank attribute values (1-10). The default value is &#39;False&#39; (optional)
     * @param line LINE pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 4 characters) (optional)
     * @param numberPattern Phone number pattern (for wildcard or vanity search). For NANP countries (US, Canada) is concatenation of nxx (the first three digits) and line. If the first three characters are specified as not digits (e.g. 5** or CAT) then parameter extendedSearch will be ignored. (optional)
     * @param nxx NXX pattern for vanity or wildcard search. Digits, Latin characters and asterisks are allowed (usually 3 characters) (optional)
     * @param npa Area code (mandatory). For example, 800, 844, 855, 866, 877, 888 for North America; and 647 for Canada (optional)
     * @param paymentType Payment type. Default is &#39;Local&#39; (it should correlate with the npa provided) (optional)
     * @param perPage Indicates the page size (number of items). If not specified, the value is &#39;10&#39; by default (optional)
     * @param smsEnabled Specifies if SMS activation is available for the number. If specified, it is taken into account in all returned phone numbers both in the phone numbers satisfying to parameters of lookup and in alternative phone numbers (in case when extendedSearch is specified). If not specified, the value is null. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10NumberPoolLookupPostAsync(Integer areaCode, String countryCode, String countryId, String exclude, Boolean extendedSearch, String line, String numberPattern, String nxx, String npa, String paymentType, Integer perPage, Boolean smsEnabled, final ApiCallback<InlineResponseDefault36> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10NumberPoolLookupPostValidateBeforeCall(areaCode, countryCode, countryId, exclude, extendedSearch, line, numberPattern, nxx, npa, paymentType, perPage, smsEnabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault36>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10NumberPoolReservePost */
    private com.squareup.okhttp.Call restapiV10NumberPoolReservePostCall(Body16 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/number-pool/reserve".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10NumberPoolReservePostValidateBeforeCall(Body16 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10NumberPoolReservePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Reserve Phone Number
     * @param body  (optional)
     * @return InlineResponseDefault37
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponseDefault37 restapiV10NumberPoolReservePost(Body16 body) throws ApiException {
        ApiResponse<InlineResponseDefault37> resp = restapiV10NumberPoolReservePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Reserve Phone Number
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponseDefault37&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponseDefault37> restapiV10NumberPoolReservePostWithHttpInfo(Body16 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10NumberPoolReservePostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponseDefault37>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reserve Phone Number
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10NumberPoolReservePostAsync(Body16 body, final ApiCallback<InlineResponseDefault37> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10NumberPoolReservePostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponseDefault37>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10SubscriptionPost */
    private com.squareup.okhttp.Call restapiV10SubscriptionPostCall(Boolean aggregated, Body17 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/subscription".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (aggregated != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aggregated", aggregated));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10SubscriptionPostValidateBeforeCall(Boolean aggregated, Body17 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = restapiV10SubscriptionPostCall(aggregated, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create New Subscription
     * @param aggregated If &#39;True&#39; then aggregated presence status is returned in a notification payload in the &#39;presenceStatus&#39; field (optional)
     * @param body  (optional)
     * @return SubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscriptionInfo restapiV10SubscriptionPost(Boolean aggregated, Body17 body) throws ApiException {
        ApiResponse<SubscriptionInfo> resp = restapiV10SubscriptionPostWithHttpInfo(aggregated, body);
        return resp.getData();
    }

    /**
     * 
     * Create New Subscription
     * @param aggregated If &#39;True&#39; then aggregated presence status is returned in a notification payload in the &#39;presenceStatus&#39; field (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;SubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscriptionInfo> restapiV10SubscriptionPostWithHttpInfo(Boolean aggregated, Body17 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10SubscriptionPostValidateBeforeCall(aggregated, body, null, null);
        Type localVarReturnType = new TypeToken<SubscriptionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create New Subscription
     * @param aggregated If &#39;True&#39; then aggregated presence status is returned in a notification payload in the &#39;presenceStatus&#39; field (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10SubscriptionPostAsync(Boolean aggregated, Body17 body, final ApiCallback<SubscriptionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10SubscriptionPostValidateBeforeCall(aggregated, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscriptionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10SubscriptionSubscriptionIdDelete */
    private com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdDeleteCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/subscription/{subscriptionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdDeleteValidateBeforeCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling restapiV10SubscriptionSubscriptionIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdDeleteCall(subscriptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cancel Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restapiV10SubscriptionSubscriptionIdDelete(String subscriptionId) throws ApiException {
        restapiV10SubscriptionSubscriptionIdDeleteWithHttpInfo(subscriptionId);
    }

    /**
     * 
     * Cancel Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restapiV10SubscriptionSubscriptionIdDeleteWithHttpInfo(String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdDeleteValidateBeforeCall(subscriptionId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Cancel Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdDeleteAsync(String subscriptionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdDeleteValidateBeforeCall(subscriptionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for restapiV10SubscriptionSubscriptionIdGet */
    private com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdGetCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/subscription/{subscriptionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdGetValidateBeforeCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling restapiV10SubscriptionSubscriptionIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdGetCall(subscriptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @return SubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscriptionInfo restapiV10SubscriptionSubscriptionIdGet(String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionInfo> resp = restapiV10SubscriptionSubscriptionIdGetWithHttpInfo(subscriptionId);
        return resp.getData();
    }

    /**
     * 
     * Get Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @return ApiResponse&lt;SubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscriptionInfo> restapiV10SubscriptionSubscriptionIdGetWithHttpInfo(String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdGetValidateBeforeCall(subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<SubscriptionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdGetAsync(String subscriptionId, final ApiCallback<SubscriptionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdGetValidateBeforeCall(subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscriptionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for restapiV10SubscriptionSubscriptionIdPut */
    private com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdPutCall(String subscriptionId, Boolean aggregated, Body18 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/restapi/v1.0/subscription/{subscriptionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (aggregated != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aggregated", aggregated));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdPutValidateBeforeCall(String subscriptionId, Boolean aggregated, Body18 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling restapiV10SubscriptionSubscriptionIdPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdPutCall(subscriptionId, aggregated, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update/Renew Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @param aggregated If &#39;True&#39; then aggregated presence status is returned in a notification payload (optional)
     * @param body  (optional)
     * @return SubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscriptionInfo restapiV10SubscriptionSubscriptionIdPut(String subscriptionId, Boolean aggregated, Body18 body) throws ApiException {
        ApiResponse<SubscriptionInfo> resp = restapiV10SubscriptionSubscriptionIdPutWithHttpInfo(subscriptionId, aggregated, body);
        return resp.getData();
    }

    /**
     * 
     * Update/Renew Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @param aggregated If &#39;True&#39; then aggregated presence status is returned in a notification payload (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;SubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscriptionInfo> restapiV10SubscriptionSubscriptionIdPutWithHttpInfo(String subscriptionId, Boolean aggregated, Body18 body) throws ApiException {
        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdPutValidateBeforeCall(subscriptionId, aggregated, body, null, null);
        Type localVarReturnType = new TypeToken<SubscriptionInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update/Renew Subscription by ID
     * @param subscriptionId Internal identifier of a subscription (required)
     * @param aggregated If &#39;True&#39; then aggregated presence status is returned in a notification payload (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restapiV10SubscriptionSubscriptionIdPutAsync(String subscriptionId, Boolean aggregated, Body18 body, final ApiCallback<SubscriptionInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restapiV10SubscriptionSubscriptionIdPutValidateBeforeCall(subscriptionId, aggregated, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscriptionInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

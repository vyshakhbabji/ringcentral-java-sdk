/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MessageAttachmentInfo;
import io.swagger.client.model.MessageInfoCallerInfo;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;

/**
 * MessageInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class MessageInfo {
  @SerializedName("id")
  private String id = null;

  @SerializedName("uri")
  private String uri = null;

  @SerializedName("attachments")
  private List<MessageAttachmentInfo> attachments = new ArrayList<MessageAttachmentInfo>();

  /**
   * Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly
   */
  public enum AvailabilityEnum {
    @SerializedName("Alive")
    ALIVE("Alive"),
    
    @SerializedName("Deleted")
    DELETED("Deleted"),
    
    @SerializedName("Purged")
    PURGED("Purged");

    private String value;

    AvailabilityEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("availability")
  private AvailabilityEnum availability = null;

  @SerializedName("conversationId")
  private Long conversationId = null;

  @SerializedName("creationTime")
  private DateTime creationTime = null;

  @SerializedName("deliveryErrorCode")
  private String deliveryErrorCode = null;

  /**
   * Message direction. Note that for some message types not all directions are allowed. For example voicemail messages can be only inbound
   */
  public enum DirectionEnum {
    @SerializedName("Inbound")
    INBOUND("Inbound"),
    
    @SerializedName("Outbound")
    OUTBOUND("Outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("faxPageCount")
  private Integer faxPageCount = null;

  /**
   * Fax only. Resolution of fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi)
   */
  public enum FaxResolutionEnum {
    @SerializedName("High")
    HIGH("High"),
    
    @SerializedName("Low")
    LOW("Low");

    private String value;

    FaxResolutionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("faxResolution")
  private FaxResolutionEnum faxResolution = null;

  @SerializedName("from")
  private MessageInfoCallerInfo from = null;

  @SerializedName("lastModifiedTime")
  private DateTime lastModifiedTime = null;

  /**
   * Message status. Different message types may have different allowed status values.
   */
  public enum MessageStatusEnum {
    @SerializedName("Queued")
    QUEUED("Queued"),
    
    @SerializedName("Sent")
    SENT("Sent"),
    
    @SerializedName("Delivered")
    DELIVERED("Delivered"),
    
    @SerializedName("DeliveryFailed")
    DELIVERYFAILED("DeliveryFailed"),
    
    @SerializedName("SendingFailed")
    SENDINGFAILED("SendingFailed"),
    
    @SerializedName("Received")
    RECEIVED("Received");

    private String value;

    MessageStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("messageStatus")
  private MessageStatusEnum messageStatus = null;

  @SerializedName("pgToDepartment")
  private Boolean pgToDepartment = null;

  /**
   * Message priority
   */
  public enum PriorityEnum {
    @SerializedName("Normal")
    NORMAL("Normal"),
    
    @SerializedName("High")
    HIGH("High");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("priority")
  private PriorityEnum priority = null;

  /**
   * Message read status
   */
  public enum ReadStatusEnum {
    @SerializedName("Read")
    READ("Read"),
    
    @SerializedName("Unread")
    UNREAD("Unread");

    private String value;

    ReadStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("readStatus")
  private ReadStatusEnum readStatus = null;

  @SerializedName("smsDeliveryTime")
  private DateTime smsDeliveryTime = null;

  @SerializedName("smsSendingAttemptsCount")
  private Integer smsSendingAttemptsCount = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("to")
  private List<MessageInfoCallerInfo> to = new ArrayList<MessageInfoCallerInfo>();

  /**
   * Message type
   */
  public enum TypeEnum {
    @SerializedName("Fax")
    FAX("Fax"),
    
    @SerializedName("SMS")
    SMS("SMS"),
    
    @SerializedName("VoiceMail")
    VOICEMAIL("VoiceMail"),
    
    @SerializedName("Pager")
    PAGER("Pager"),
    
    @SerializedName("Text")
    TEXT("Text");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not activated for account, the 'NotAvailable' value is returned
   */
  public enum VmTranscriptionStatusEnum {
    @SerializedName("NotAvailable")
    NOTAVAILABLE("NotAvailable"),
    
    @SerializedName("InProgress")
    INPROGRESS("InProgress"),
    
    @SerializedName("TimedOut")
    TIMEDOUT("TimedOut"),
    
    @SerializedName("Completed")
    COMPLETED("Completed"),
    
    @SerializedName("CompletedPartially")
    COMPLETEDPARTIALLY("CompletedPartially"),
    
    @SerializedName("Failed")
    FAILED("Failed");

    private String value;

    VmTranscriptionStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("vmTranscriptionStatus")
  private VmTranscriptionStatusEnum vmTranscriptionStatus = null;

  public MessageInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Internal identifier of a message
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "Internal identifier of a message")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MessageInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Canonical URI of a message
   * @return uri
  **/
  @ApiModelProperty(example = "null", value = "Canonical URI of a message")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public MessageInfo attachments(List<MessageAttachmentInfo> attachments) {
    this.attachments = attachments;
    return this;
  }

  public MessageInfo addAttachmentsItem(MessageAttachmentInfo attachmentsItem) {
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * The list of message attachments
   * @return attachments
  **/
  @ApiModelProperty(example = "null", value = "The list of message attachments")
  public List<MessageAttachmentInfo> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<MessageAttachmentInfo> attachments) {
    this.attachments = attachments;
  }

  public MessageInfo availability(AvailabilityEnum availability) {
    this.availability = availability;
    return this;
  }

   /**
   * Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly
   * @return availability
  **/
  @ApiModelProperty(example = "null", value = "Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly")
  public AvailabilityEnum getAvailability() {
    return availability;
  }

  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }

  public MessageInfo conversationId(Long conversationId) {
    this.conversationId = conversationId;
    return this;
  }

   /**
   * SMS and Pager only. Identifier of the conversation the message belongs to
   * @return conversationId
  **/
  @ApiModelProperty(example = "null", value = "SMS and Pager only. Identifier of the conversation the message belongs to")
  public Long getConversationId() {
    return conversationId;
  }

  public void setConversationId(Long conversationId) {
    this.conversationId = conversationId;
  }

  public MessageInfo creationTime(DateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
   * @return creationTime
  **/
  @ApiModelProperty(example = "null", value = "Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z")
  public DateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(DateTime creationTime) {
    this.creationTime = creationTime;
  }

  public MessageInfo deliveryErrorCode(String deliveryErrorCode) {
    this.deliveryErrorCode = deliveryErrorCode;
    return this;
  }

   /**
   * SMS only. Delivery error code returned by gateway
   * @return deliveryErrorCode
  **/
  @ApiModelProperty(example = "null", value = "SMS only. Delivery error code returned by gateway")
  public String getDeliveryErrorCode() {
    return deliveryErrorCode;
  }

  public void setDeliveryErrorCode(String deliveryErrorCode) {
    this.deliveryErrorCode = deliveryErrorCode;
  }

  public MessageInfo direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Message direction. Note that for some message types not all directions are allowed. For example voicemail messages can be only inbound
   * @return direction
  **/
  @ApiModelProperty(example = "null", value = "Message direction. Note that for some message types not all directions are allowed. For example voicemail messages can be only inbound")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public MessageInfo faxPageCount(Integer faxPageCount) {
    this.faxPageCount = faxPageCount;
    return this;
  }

   /**
   * Fax only. Page count in fax message
   * @return faxPageCount
  **/
  @ApiModelProperty(example = "null", value = "Fax only. Page count in fax message")
  public Integer getFaxPageCount() {
    return faxPageCount;
  }

  public void setFaxPageCount(Integer faxPageCount) {
    this.faxPageCount = faxPageCount;
  }

  public MessageInfo faxResolution(FaxResolutionEnum faxResolution) {
    this.faxResolution = faxResolution;
    return this;
  }

   /**
   * Fax only. Resolution of fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi)
   * @return faxResolution
  **/
  @ApiModelProperty(example = "null", value = "Fax only. Resolution of fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi)")
  public FaxResolutionEnum getFaxResolution() {
    return faxResolution;
  }

  public void setFaxResolution(FaxResolutionEnum faxResolution) {
    this.faxResolution = faxResolution;
  }

  public MessageInfo from(MessageInfoCallerInfo from) {
    this.from = from;
    return this;
  }

   /**
   * Sender information
   * @return from
  **/
  @ApiModelProperty(example = "null", value = "Sender information")
  public MessageInfoCallerInfo getFrom() {
    return from;
  }

  public void setFrom(MessageInfoCallerInfo from) {
    this.from = from;
  }

  public MessageInfo lastModifiedTime(DateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

   /**
   * The datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
   * @return lastModifiedTime
  **/
  @ApiModelProperty(example = "null", value = "The datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z")
  public DateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(DateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }

  public MessageInfo messageStatus(MessageStatusEnum messageStatus) {
    this.messageStatus = messageStatus;
    return this;
  }

   /**
   * Message status. Different message types may have different allowed status values.
   * @return messageStatus
  **/
  @ApiModelProperty(example = "null", value = "Message status. Different message types may have different allowed status values.")
  public MessageStatusEnum getMessageStatus() {
    return messageStatus;
  }

  public void setMessageStatus(MessageStatusEnum messageStatus) {
    this.messageStatus = messageStatus;
  }

  public MessageInfo pgToDepartment(Boolean pgToDepartment) {
    this.pgToDepartment = pgToDepartment;
    return this;
  }

   /**
   * Pager only True if at least one of the message recipients is Department extension
   * @return pgToDepartment
  **/
  @ApiModelProperty(example = "null", value = "Pager only True if at least one of the message recipients is Department extension")
  public Boolean getPgToDepartment() {
    return pgToDepartment;
  }

  public void setPgToDepartment(Boolean pgToDepartment) {
    this.pgToDepartment = pgToDepartment;
  }

  public MessageInfo priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Message priority
   * @return priority
  **/
  @ApiModelProperty(example = "null", value = "Message priority")
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }

  public MessageInfo readStatus(ReadStatusEnum readStatus) {
    this.readStatus = readStatus;
    return this;
  }

   /**
   * Message read status
   * @return readStatus
  **/
  @ApiModelProperty(example = "null", value = "Message read status")
  public ReadStatusEnum getReadStatus() {
    return readStatus;
  }

  public void setReadStatus(ReadStatusEnum readStatus) {
    this.readStatus = readStatus;
  }

  public MessageInfo smsDeliveryTime(DateTime smsDeliveryTime) {
    this.smsDeliveryTime = smsDeliveryTime;
    return this;
  }

   /**
   * SMS only. The datetime when outbound SMS was delivered to recipient's handset in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. It is filled only if the carrier sends a delivery receipt to RingCentral
   * @return smsDeliveryTime
  **/
  @ApiModelProperty(example = "null", value = "SMS only. The datetime when outbound SMS was delivered to recipient's handset in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. It is filled only if the carrier sends a delivery receipt to RingCentral")
  public DateTime getSmsDeliveryTime() {
    return smsDeliveryTime;
  }

  public void setSmsDeliveryTime(DateTime smsDeliveryTime) {
    this.smsDeliveryTime = smsDeliveryTime;
  }

  public MessageInfo smsSendingAttemptsCount(Integer smsSendingAttemptsCount) {
    this.smsSendingAttemptsCount = smsSendingAttemptsCount;
    return this;
  }

   /**
   * SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is temporary unavailable)
   * @return smsSendingAttemptsCount
  **/
  @ApiModelProperty(example = "null", value = "SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is temporary unavailable)")
  public Integer getSmsSendingAttemptsCount() {
    return smsSendingAttemptsCount;
  }

  public void setSmsSendingAttemptsCount(Integer smsSendingAttemptsCount) {
    this.smsSendingAttemptsCount = smsSendingAttemptsCount;
  }

  public MessageInfo subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Message subject. For SMS and Pager messages it replicates message text which is also returned as an attachment
   * @return subject
  **/
  @ApiModelProperty(example = "null", value = "Message subject. For SMS and Pager messages it replicates message text which is also returned as an attachment")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public MessageInfo to(List<MessageInfoCallerInfo> to) {
    this.to = to;
    return this;
  }

  public MessageInfo addToItem(MessageInfoCallerInfo toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * Recipient information
   * @return to
  **/
  @ApiModelProperty(example = "null", value = "Recipient information")
  public List<MessageInfoCallerInfo> getTo() {
    return to;
  }

  public void setTo(List<MessageInfoCallerInfo> to) {
    this.to = to;
  }

  public MessageInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Message type
   * @return type
  **/
  @ApiModelProperty(example = "null", value = "Message type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MessageInfo vmTranscriptionStatus(VmTranscriptionStatusEnum vmTranscriptionStatus) {
    this.vmTranscriptionStatus = vmTranscriptionStatus;
    return this;
  }

   /**
   * Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not activated for account, the 'NotAvailable' value is returned
   * @return vmTranscriptionStatus
  **/
  @ApiModelProperty(example = "null", value = "Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not activated for account, the 'NotAvailable' value is returned")
  public VmTranscriptionStatusEnum getVmTranscriptionStatus() {
    return vmTranscriptionStatus;
  }

  public void setVmTranscriptionStatus(VmTranscriptionStatusEnum vmTranscriptionStatus) {
    this.vmTranscriptionStatus = vmTranscriptionStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageInfo messageInfo = (MessageInfo) o;
    return Objects.equals(this.id, messageInfo.id) &&
        Objects.equals(this.uri, messageInfo.uri) &&
        Objects.equals(this.attachments, messageInfo.attachments) &&
        Objects.equals(this.availability, messageInfo.availability) &&
        Objects.equals(this.conversationId, messageInfo.conversationId) &&
        Objects.equals(this.creationTime, messageInfo.creationTime) &&
        Objects.equals(this.deliveryErrorCode, messageInfo.deliveryErrorCode) &&
        Objects.equals(this.direction, messageInfo.direction) &&
        Objects.equals(this.faxPageCount, messageInfo.faxPageCount) &&
        Objects.equals(this.faxResolution, messageInfo.faxResolution) &&
        Objects.equals(this.from, messageInfo.from) &&
        Objects.equals(this.lastModifiedTime, messageInfo.lastModifiedTime) &&
        Objects.equals(this.messageStatus, messageInfo.messageStatus) &&
        Objects.equals(this.pgToDepartment, messageInfo.pgToDepartment) &&
        Objects.equals(this.priority, messageInfo.priority) &&
        Objects.equals(this.readStatus, messageInfo.readStatus) &&
        Objects.equals(this.smsDeliveryTime, messageInfo.smsDeliveryTime) &&
        Objects.equals(this.smsSendingAttemptsCount, messageInfo.smsSendingAttemptsCount) &&
        Objects.equals(this.subject, messageInfo.subject) &&
        Objects.equals(this.to, messageInfo.to) &&
        Objects.equals(this.type, messageInfo.type) &&
        Objects.equals(this.vmTranscriptionStatus, messageInfo.vmTranscriptionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uri, attachments, availability, conversationId, creationTime, deliveryErrorCode, direction, faxPageCount, faxResolution, from, lastModifiedTime, messageStatus, pgToDepartment, priority, readStatus, smsDeliveryTime, smsSendingAttemptsCount, subject, to, type, vmTranscriptionStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    deliveryErrorCode: ").append(toIndentedString(deliveryErrorCode)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    faxPageCount: ").append(toIndentedString(faxPageCount)).append("\n");
    sb.append("    faxResolution: ").append(toIndentedString(faxResolution)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    messageStatus: ").append(toIndentedString(messageStatus)).append("\n");
    sb.append("    pgToDepartment: ").append(toIndentedString(pgToDepartment)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    readStatus: ").append(toIndentedString(readStatus)).append("\n");
    sb.append("    smsDeliveryTime: ").append(toIndentedString(smsDeliveryTime)).append("\n");
    sb.append("    smsSendingAttemptsCount: ").append(toIndentedString(smsSendingAttemptsCount)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vmTranscriptionStatus: ").append(toIndentedString(vmTranscriptionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


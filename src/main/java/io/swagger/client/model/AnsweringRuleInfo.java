/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AnsweringRuleInfoCalleeInfo;
import io.swagger.client.model.AnsweringRuleInfoCallerInfo;
import io.swagger.client.model.ForwardingInfo;
import io.swagger.client.model.ScheduleInfo;
import io.swagger.client.model.UnconditionalForwardingInfo;
import io.swagger.client.model.VoicemailInfo;
import java.util.ArrayList;
import java.util.List;

/**
 * AnsweringRuleInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class AnsweringRuleInfo {
  @SerializedName("uri")
  private String uri = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Type of an answering rule
   */
  public enum TypeEnum {
    @SerializedName("BusinessHours")
    BUSINESSHOURS("BusinessHours"),
    
    @SerializedName("AfterHours")
    AFTERHOURS("AfterHours"),
    
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("schedule")
  private ScheduleInfo schedule = null;

  @SerializedName("calledNumbers")
  private List<AnsweringRuleInfoCalleeInfo> calledNumbers = new ArrayList<AnsweringRuleInfoCalleeInfo>();

  @SerializedName("callers")
  private List<AnsweringRuleInfoCallerInfo> callers = new ArrayList<AnsweringRuleInfoCallerInfo>();

  /**
   * Specifies how incoming calls are forwarded
   */
  public enum CallHandlingActionEnum {
    @SerializedName("ForwardCalls")
    FORWARDCALLS("ForwardCalls"),
    
    @SerializedName("TakeMessagesOnly")
    TAKEMESSAGESONLY("TakeMessagesOnly"),
    
    @SerializedName("PlayAnnouncementOnly")
    PLAYANNOUNCEMENTONLY("PlayAnnouncementOnly"),
    
    @SerializedName("UnconditionalForwarding")
    UNCONDITIONALFORWARDING("UnconditionalForwarding");

    private String value;

    CallHandlingActionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("callHandlingAction")
  private CallHandlingActionEnum callHandlingAction = null;

  @SerializedName("forwarding")
  private ForwardingInfo forwarding = null;

  @SerializedName("unconditionalForwarding")
  private UnconditionalForwardingInfo unconditionalForwarding = null;

  @SerializedName("voicemail")
  private VoicemailInfo voicemail = null;

  public AnsweringRuleInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Canonical URI to the answering rule resource
   * @return uri
  **/
  @ApiModelProperty(example = "null", value = "Canonical URI to the answering rule resource")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public AnsweringRuleInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Internal identifier of an asnwering rule
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "Internal identifier of an asnwering rule")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public AnsweringRuleInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of an answering rule
   * @return type
  **/
  @ApiModelProperty(example = "null", value = "Type of an answering rule")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AnsweringRuleInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of an answering rule specified by user
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Name of an answering rule specified by user")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AnsweringRuleInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Specifies if an answering rule is active or inactive
   * @return enabled
  **/
  @ApiModelProperty(example = "null", value = "Specifies if an answering rule is active or inactive")
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public AnsweringRuleInfo schedule(ScheduleInfo schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Schedule when an answering rule should be applied
   * @return schedule
  **/
  @ApiModelProperty(example = "null", value = "Schedule when an answering rule should be applied")
  public ScheduleInfo getSchedule() {
    return schedule;
  }

  public void setSchedule(ScheduleInfo schedule) {
    this.schedule = schedule;
  }

  public AnsweringRuleInfo calledNumbers(List<AnsweringRuleInfoCalleeInfo> calledNumbers) {
    this.calledNumbers = calledNumbers;
    return this;
  }

  public AnsweringRuleInfo addCalledNumbersItem(AnsweringRuleInfoCalleeInfo calledNumbersItem) {
    this.calledNumbers.add(calledNumbersItem);
    return this;
  }

   /**
   * Answering rules are applied when calling to selected number(s)
   * @return calledNumbers
  **/
  @ApiModelProperty(example = "null", value = "Answering rules are applied when calling to selected number(s)")
  public List<AnsweringRuleInfoCalleeInfo> getCalledNumbers() {
    return calledNumbers;
  }

  public void setCalledNumbers(List<AnsweringRuleInfoCalleeInfo> calledNumbers) {
    this.calledNumbers = calledNumbers;
  }

  public AnsweringRuleInfo callers(List<AnsweringRuleInfoCallerInfo> callers) {
    this.callers = callers;
    return this;
  }

  public AnsweringRuleInfo addCallersItem(AnsweringRuleInfoCallerInfo callersItem) {
    this.callers.add(callersItem);
    return this;
  }

   /**
   * Answering rules are applied when calls are received from specified caller(s)
   * @return callers
  **/
  @ApiModelProperty(example = "null", value = "Answering rules are applied when calls are received from specified caller(s)")
  public List<AnsweringRuleInfoCallerInfo> getCallers() {
    return callers;
  }

  public void setCallers(List<AnsweringRuleInfoCallerInfo> callers) {
    this.callers = callers;
  }

  public AnsweringRuleInfo callHandlingAction(CallHandlingActionEnum callHandlingAction) {
    this.callHandlingAction = callHandlingAction;
    return this;
  }

   /**
   * Specifies how incoming calls are forwarded
   * @return callHandlingAction
  **/
  @ApiModelProperty(example = "null", value = "Specifies how incoming calls are forwarded")
  public CallHandlingActionEnum getCallHandlingAction() {
    return callHandlingAction;
  }

  public void setCallHandlingAction(CallHandlingActionEnum callHandlingAction) {
    this.callHandlingAction = callHandlingAction;
  }

  public AnsweringRuleInfo forwarding(ForwardingInfo forwarding) {
    this.forwarding = forwarding;
    return this;
  }

   /**
   * Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These settings determine the forwarding numbers to which the call will be forwarded
   * @return forwarding
  **/
  @ApiModelProperty(example = "null", value = "Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These settings determine the forwarding numbers to which the call will be forwarded")
  public ForwardingInfo getForwarding() {
    return forwarding;
  }

  public void setForwarding(ForwardingInfo forwarding) {
    this.forwarding = forwarding;
  }

  public AnsweringRuleInfo unconditionalForwarding(UnconditionalForwardingInfo unconditionalForwarding) {
    this.unconditionalForwarding = unconditionalForwarding;
    return this;
  }

   /**
   * Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in 'callHandlingAction'
   * @return unconditionalForwarding
  **/
  @ApiModelProperty(example = "null", value = "Unconditional forwarding parameters. Returned if 'UnconditionalForwarding' is specified in 'callHandlingAction'")
  public UnconditionalForwardingInfo getUnconditionalForwarding() {
    return unconditionalForwarding;
  }

  public void setUnconditionalForwarding(UnconditionalForwardingInfo unconditionalForwarding) {
    this.unconditionalForwarding = unconditionalForwarding;
  }

  public AnsweringRuleInfo voicemail(VoicemailInfo voicemail) {
    this.voicemail = voicemail;
    return this;
  }

   /**
   * Specifies whether to take a voicemail and who should do it
   * @return voicemail
  **/
  @ApiModelProperty(example = "null", value = "Specifies whether to take a voicemail and who should do it")
  public VoicemailInfo getVoicemail() {
    return voicemail;
  }

  public void setVoicemail(VoicemailInfo voicemail) {
    this.voicemail = voicemail;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnsweringRuleInfo answeringRuleInfo = (AnsweringRuleInfo) o;
    return Objects.equals(this.uri, answeringRuleInfo.uri) &&
        Objects.equals(this.id, answeringRuleInfo.id) &&
        Objects.equals(this.type, answeringRuleInfo.type) &&
        Objects.equals(this.name, answeringRuleInfo.name) &&
        Objects.equals(this.enabled, answeringRuleInfo.enabled) &&
        Objects.equals(this.schedule, answeringRuleInfo.schedule) &&
        Objects.equals(this.calledNumbers, answeringRuleInfo.calledNumbers) &&
        Objects.equals(this.callers, answeringRuleInfo.callers) &&
        Objects.equals(this.callHandlingAction, answeringRuleInfo.callHandlingAction) &&
        Objects.equals(this.forwarding, answeringRuleInfo.forwarding) &&
        Objects.equals(this.unconditionalForwarding, answeringRuleInfo.unconditionalForwarding) &&
        Objects.equals(this.voicemail, answeringRuleInfo.voicemail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, id, type, name, enabled, schedule, calledNumbers, callers, callHandlingAction, forwarding, unconditionalForwarding, voicemail);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnsweringRuleInfo {\n");
    
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    calledNumbers: ").append(toIndentedString(calledNumbers)).append("\n");
    sb.append("    callers: ").append(toIndentedString(callers)).append("\n");
    sb.append("    callHandlingAction: ").append(toIndentedString(callHandlingAction)).append("\n");
    sb.append("    forwarding: ").append(toIndentedString(forwarding)).append("\n");
    sb.append("    unconditionalForwarding: ").append(toIndentedString(unconditionalForwarding)).append("\n");
    sb.append("    voicemail: ").append(toIndentedString(voicemail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


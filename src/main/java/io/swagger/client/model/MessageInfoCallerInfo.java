/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * MessageInfoCallerInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class MessageInfoCallerInfo {
  @SerializedName("extensionNumber")
  private String extensionNumber = null;

  @SerializedName("location")
  private String location = null;

  /**
   * Status of a message. Returned for outbound fax messages only
   */
  public enum MessageStatusEnum {
    @SerializedName("Queued")
    QUEUED("Queued"),
    
    @SerializedName("Sent")
    SENT("Sent"),
    
    @SerializedName("Delivered")
    DELIVERED("Delivered"),
    
    @SerializedName("DeliveryFailed")
    DELIVERYFAILED("DeliveryFailed"),
    
    @SerializedName("SendingFailed")
    SENDINGFAILED("SendingFailed"),
    
    @SerializedName("Received")
    RECEIVED("Received");

    private String value;

    MessageStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("messageStatus")
  private MessageStatusEnum messageStatus = null;

  /**
   * Fax only. Error code returned in case of fax sending failure. Returned if messageStatus value is 'SendingFailed'
   */
  public enum FaxErrorCodeEnum {
    @SerializedName("Undefined")
    UNDEFINED("Undefined"),
    
    @SerializedName("NoFaxSendPermission")
    NOFAXSENDPERMISSION("NoFaxSendPermission"),
    
    @SerializedName("NoInternationalPermission")
    NOINTERNATIONALPERMISSION("NoInternationalPermission"),
    
    @SerializedName("NoFaxMachine")
    NOFAXMACHINE("NoFaxMachine"),
    
    @SerializedName("OutgoingCallError")
    OUTGOINGCALLERROR("OutgoingCallError"),
    
    @SerializedName("RenderingFailed")
    RENDERINGFAILED("RenderingFailed"),
    
    @SerializedName("TooManyPages")
    TOOMANYPAGES("TooManyPages"),
    
    @SerializedName("ReturnToDBQueue")
    RETURNTODBQUEUE("ReturnToDBQueue"),
    
    @SerializedName("NoCallTime")
    NOCALLTIME("NoCallTime"),
    
    @SerializedName("WrongNumber")
    WRONGNUMBER("WrongNumber"),
    
    @SerializedName("ProhibitedNumber")
    PROHIBITEDNUMBER("ProhibitedNumber"),
    
    @SerializedName("InternalError")
    INTERNALERROR("InternalError"),
    
    @SerializedName("FaxSendingProhibited")
    FAXSENDINGPROHIBITED("FaxSendingProhibited"),
    
    @SerializedName("ThePhoneIsBlacklisted")
    THEPHONEISBLACKLISTED("ThePhoneIsBlacklisted"),
    
    @SerializedName("UserNotFound")
    USERNOTFOUND("UserNotFound"),
    
    @SerializedName("ConvertError")
    CONVERTERROR("ConvertError"),
    
    @SerializedName("DBGeneralError")
    DBGENERALERROR("DBGeneralError"),
    
    @SerializedName("SkypeBillingFailed")
    SKYPEBILLINGFAILED("SkypeBillingFailed"),
    
    @SerializedName("AccountSuspended")
    ACCOUNTSUSPENDED("AccountSuspended"),
    
    @SerializedName("ProhibitedDestination")
    PROHIBITEDDESTINATION("ProhibitedDestination"),
    
    @SerializedName("InternationalDisabled")
    INTERNATIONALDISABLED("InternationalDisabled");

    private String value;

    FaxErrorCodeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("faxErrorCode")
  private FaxErrorCodeEnum faxErrorCode = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("phoneNumber")
  private String phoneNumber = null;

  public MessageInfoCallerInfo extensionNumber(String extensionNumber) {
    this.extensionNumber = extensionNumber;
    return this;
  }

   /**
   * Extension short number (usually 3 or 4 digits). This property is filled when parties communicate by means of short internal numbers, for example when calling to other extension or sending/receiving Company Pager message
   * @return extensionNumber
  **/
  @ApiModelProperty(example = "null", value = "Extension short number (usually 3 or 4 digits). This property is filled when parties communicate by means of short internal numbers, for example when calling to other extension or sending/receiving Company Pager message")
  public String getExtensionNumber() {
    return extensionNumber;
  }

  public void setExtensionNumber(String extensionNumber) {
    this.extensionNumber = extensionNumber;
  }

  public MessageInfoCallerInfo location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)
   * @return location
  **/
  @ApiModelProperty(example = "null", value = "Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public MessageInfoCallerInfo messageStatus(MessageStatusEnum messageStatus) {
    this.messageStatus = messageStatus;
    return this;
  }

   /**
   * Status of a message. Returned for outbound fax messages only
   * @return messageStatus
  **/
  @ApiModelProperty(example = "null", value = "Status of a message. Returned for outbound fax messages only")
  public MessageStatusEnum getMessageStatus() {
    return messageStatus;
  }

  public void setMessageStatus(MessageStatusEnum messageStatus) {
    this.messageStatus = messageStatus;
  }

  public MessageInfoCallerInfo faxErrorCode(FaxErrorCodeEnum faxErrorCode) {
    this.faxErrorCode = faxErrorCode;
    return this;
  }

   /**
   * Fax only. Error code returned in case of fax sending failure. Returned if messageStatus value is 'SendingFailed'
   * @return faxErrorCode
  **/
  @ApiModelProperty(example = "null", value = "Fax only. Error code returned in case of fax sending failure. Returned if messageStatus value is 'SendingFailed'")
  public FaxErrorCodeEnum getFaxErrorCode() {
    return faxErrorCode;
  }

  public void setFaxErrorCode(FaxErrorCodeEnum faxErrorCode) {
    this.faxErrorCode = faxErrorCode;
  }

  public MessageInfoCallerInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Symbolic name associated with a party. If the phone does not belong to the known extension, only the location is returned, the name is not determined then
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Symbolic name associated with a party. If the phone does not belong to the known extension, only the location is returned, the name is not determined then")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MessageInfoCallerInfo phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Phone number of a party. Usually it is a plain number including country and area code like 18661234567. But sometimes it could be returned from database with some formatting applied, for example (866)123-4567. This property is filled in all cases where parties communicate by means of global phone numbers, for example when calling to direct numbers or sending/receiving SMS
   * @return phoneNumber
  **/
  @ApiModelProperty(example = "null", value = "Phone number of a party. Usually it is a plain number including country and area code like 18661234567. But sometimes it could be returned from database with some formatting applied, for example (866)123-4567. This property is filled in all cases where parties communicate by means of global phone numbers, for example when calling to direct numbers or sending/receiving SMS")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageInfoCallerInfo messageInfoCallerInfo = (MessageInfoCallerInfo) o;
    return Objects.equals(this.extensionNumber, messageInfoCallerInfo.extensionNumber) &&
        Objects.equals(this.location, messageInfoCallerInfo.location) &&
        Objects.equals(this.messageStatus, messageInfoCallerInfo.messageStatus) &&
        Objects.equals(this.faxErrorCode, messageInfoCallerInfo.faxErrorCode) &&
        Objects.equals(this.name, messageInfoCallerInfo.name) &&
        Objects.equals(this.phoneNumber, messageInfoCallerInfo.phoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionNumber, location, messageStatus, faxErrorCode, name, phoneNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageInfoCallerInfo {\n");
    
    sb.append("    extensionNumber: ").append(toIndentedString(extensionNumber)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    messageStatus: ").append(toIndentedString(messageStatus)).append("\n");
    sb.append("    faxErrorCode: ").append(toIndentedString(faxErrorCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


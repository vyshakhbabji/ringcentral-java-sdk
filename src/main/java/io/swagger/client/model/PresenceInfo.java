/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.PresenceInfoExtensionInfo;

/**
 * PresenceInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class PresenceInfo {
  @SerializedName("uri")
  private String uri = null;

  @SerializedName("allowSeeMyPresence")
  private Boolean allowSeeMyPresence = null;

  /**
   * Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and 'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department; if these values are set for department outsiders, the 400 Bad Request error code is returned. The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and is available for some migrated accounts only.
   */
  public enum DndStatusEnum {
    @SerializedName("TakeAllCalls")
    TAKEALLCALLS("TakeAllCalls"),
    
    @SerializedName("DoNotAcceptAnyCalls")
    DONOTACCEPTANYCALLS("DoNotAcceptAnyCalls"),
    
    @SerializedName("DoNotAcceptDepartmentCalls")
    DONOTACCEPTDEPARTMENTCALLS("DoNotAcceptDepartmentCalls"),
    
    @SerializedName("TakeDepartmentCallsOnly")
    TAKEDEPARTMENTCALLSONLY("TakeDepartmentCallsOnly");

    private String value;

    DndStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("dndStatus")
  private DndStatusEnum dndStatus = null;

  @SerializedName("extension")
  private PresenceInfoExtensionInfo extension = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("pickUpCallsOnHold")
  private Boolean pickUpCallsOnHold = null;

  /**
   * Aggregated presence status, calculated from a number of sources
   */
  public enum PresenceStatusEnum {
    @SerializedName("Offline")
    OFFLINE("Offline"),
    
    @SerializedName("Busy")
    BUSY("Busy"),
    
    @SerializedName("Available")
    AVAILABLE("Available");

    private String value;

    PresenceStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("presenceStatus")
  private PresenceStatusEnum presenceStatus = null;

  @SerializedName("ringOnMonitoredCall")
  private Boolean ringOnMonitoredCall = null;

  /**
   * Telephony presence status
   */
  public enum TelephonyStatusEnum {
    @SerializedName("NoCall")
    NOCALL("NoCall"),
    
    @SerializedName("CallConnected")
    CALLCONNECTED("CallConnected"),
    
    @SerializedName("Ringing")
    RINGING("Ringing"),
    
    @SerializedName("OnHold")
    ONHOLD("OnHold"),
    
    @SerializedName("ParkedCall")
    PARKEDCALL("ParkedCall");

    private String value;

    TelephonyStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("telephonyStatus")
  private TelephonyStatusEnum telephonyStatus = null;

  /**
   * User-defined presence status (as previously published by the user)
   */
  public enum UserStatusEnum {
    @SerializedName("Offline")
    OFFLINE("Offline"),
    
    @SerializedName("Busy")
    BUSY("Busy"),
    
    @SerializedName("Available")
    AVAILABLE("Available");

    private String value;

    UserStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("userStatus")
  private UserStatusEnum userStatus = null;

  public PresenceInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Canonical URI of a presence info resource
   * @return uri
  **/
  @ApiModelProperty(example = "null", value = "Canonical URI of a presence info resource")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public PresenceInfo allowSeeMyPresence(Boolean allowSeeMyPresence) {
    this.allowSeeMyPresence = allowSeeMyPresence;
    return this;
  }

   /**
   * If 'True' enables other extensions to see the extension presence status
   * @return allowSeeMyPresence
  **/
  @ApiModelProperty(example = "null", value = "If 'True' enables other extensions to see the extension presence status")
  public Boolean getAllowSeeMyPresence() {
    return allowSeeMyPresence;
  }

  public void setAllowSeeMyPresence(Boolean allowSeeMyPresence) {
    this.allowSeeMyPresence = allowSeeMyPresence;
  }

  public PresenceInfo dndStatus(DndStatusEnum dndStatus) {
    this.dndStatus = dndStatus;
    return this;
  }

   /**
   * Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and 'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department; if these values are set for department outsiders, the 400 Bad Request error code is returned. The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and is available for some migrated accounts only.
   * @return dndStatus
  **/
  @ApiModelProperty(example = "null", value = "Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and 'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department; if these values are set for department outsiders, the 400 Bad Request error code is returned. The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and is available for some migrated accounts only.")
  public DndStatusEnum getDndStatus() {
    return dndStatus;
  }

  public void setDndStatus(DndStatusEnum dndStatus) {
    this.dndStatus = dndStatus;
  }

  public PresenceInfo extension(PresenceInfoExtensionInfo extension) {
    this.extension = extension;
    return this;
  }

   /**
   * Information on extension, for which this presence data is returned
   * @return extension
  **/
  @ApiModelProperty(example = "null", value = "Information on extension, for which this presence data is returned")
  public PresenceInfoExtensionInfo getExtension() {
    return extension;
  }

  public void setExtension(PresenceInfoExtensionInfo extension) {
    this.extension = extension;
  }

  public PresenceInfo message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Custom status message (as previously published by user)
   * @return message
  **/
  @ApiModelProperty(example = "null", value = "Custom status message (as previously published by user)")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public PresenceInfo pickUpCallsOnHold(Boolean pickUpCallsOnHold) {
    this.pickUpCallsOnHold = pickUpCallsOnHold;
    return this;
  }

   /**
   * If 'True' enables the extension user to pick up a monitored line on hold
   * @return pickUpCallsOnHold
  **/
  @ApiModelProperty(example = "null", value = "If 'True' enables the extension user to pick up a monitored line on hold")
  public Boolean getPickUpCallsOnHold() {
    return pickUpCallsOnHold;
  }

  public void setPickUpCallsOnHold(Boolean pickUpCallsOnHold) {
    this.pickUpCallsOnHold = pickUpCallsOnHold;
  }

  public PresenceInfo presenceStatus(PresenceStatusEnum presenceStatus) {
    this.presenceStatus = presenceStatus;
    return this;
  }

   /**
   * Aggregated presence status, calculated from a number of sources
   * @return presenceStatus
  **/
  @ApiModelProperty(example = "null", value = "Aggregated presence status, calculated from a number of sources")
  public PresenceStatusEnum getPresenceStatus() {
    return presenceStatus;
  }

  public void setPresenceStatus(PresenceStatusEnum presenceStatus) {
    this.presenceStatus = presenceStatus;
  }

  public PresenceInfo ringOnMonitoredCall(Boolean ringOnMonitoredCall) {
    this.ringOnMonitoredCall = ringOnMonitoredCall;
    return this;
  }

   /**
   * If 'True' enables to ring extension phone, if any user monitored by this extension is ringing
   * @return ringOnMonitoredCall
  **/
  @ApiModelProperty(example = "null", value = "If 'True' enables to ring extension phone, if any user monitored by this extension is ringing")
  public Boolean getRingOnMonitoredCall() {
    return ringOnMonitoredCall;
  }

  public void setRingOnMonitoredCall(Boolean ringOnMonitoredCall) {
    this.ringOnMonitoredCall = ringOnMonitoredCall;
  }

  public PresenceInfo telephonyStatus(TelephonyStatusEnum telephonyStatus) {
    this.telephonyStatus = telephonyStatus;
    return this;
  }

   /**
   * Telephony presence status
   * @return telephonyStatus
  **/
  @ApiModelProperty(example = "null", value = "Telephony presence status")
  public TelephonyStatusEnum getTelephonyStatus() {
    return telephonyStatus;
  }

  public void setTelephonyStatus(TelephonyStatusEnum telephonyStatus) {
    this.telephonyStatus = telephonyStatus;
  }

  public PresenceInfo userStatus(UserStatusEnum userStatus) {
    this.userStatus = userStatus;
    return this;
  }

   /**
   * User-defined presence status (as previously published by the user)
   * @return userStatus
  **/
  @ApiModelProperty(example = "null", value = "User-defined presence status (as previously published by the user)")
  public UserStatusEnum getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(UserStatusEnum userStatus) {
    this.userStatus = userStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresenceInfo presenceInfo = (PresenceInfo) o;
    return Objects.equals(this.uri, presenceInfo.uri) &&
        Objects.equals(this.allowSeeMyPresence, presenceInfo.allowSeeMyPresence) &&
        Objects.equals(this.dndStatus, presenceInfo.dndStatus) &&
        Objects.equals(this.extension, presenceInfo.extension) &&
        Objects.equals(this.message, presenceInfo.message) &&
        Objects.equals(this.pickUpCallsOnHold, presenceInfo.pickUpCallsOnHold) &&
        Objects.equals(this.presenceStatus, presenceInfo.presenceStatus) &&
        Objects.equals(this.ringOnMonitoredCall, presenceInfo.ringOnMonitoredCall) &&
        Objects.equals(this.telephonyStatus, presenceInfo.telephonyStatus) &&
        Objects.equals(this.userStatus, presenceInfo.userStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, allowSeeMyPresence, dndStatus, extension, message, pickUpCallsOnHold, presenceStatus, ringOnMonitoredCall, telephonyStatus, userStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresenceInfo {\n");
    
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    allowSeeMyPresence: ").append(toIndentedString(allowSeeMyPresence)).append("\n");
    sb.append("    dndStatus: ").append(toIndentedString(dndStatus)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pickUpCallsOnHold: ").append(toIndentedString(pickUpCallsOnHold)).append("\n");
    sb.append("    presenceStatus: ").append(toIndentedString(presenceStatus)).append("\n");
    sb.append("    ringOnMonitoredCall: ").append(toIndentedString(ringOnMonitoredCall)).append("\n");
    sb.append("    telephonyStatus: ").append(toIndentedString(telephonyStatus)).append("\n");
    sb.append("    userStatus: ").append(toIndentedString(userStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


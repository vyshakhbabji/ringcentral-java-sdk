/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CountryInfo;
import io.swagger.client.model.PhoneNumberInfoExtensionInfo;
import java.util.ArrayList;
import java.util.List;

/**
 * PhoneNumberInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class PhoneNumberInfo {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("country")
  private CountryInfo country = null;

  @SerializedName("extension")
  private PhoneNumberInfoExtensionInfo extension = null;

  @SerializedName("features")
  private List<String> features = new ArrayList<String>();

  @SerializedName("location")
  private String location = null;

  /**
   * Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system
   */
  public enum PaymentTypeEnum {
    @SerializedName("External")
    EXTERNAL("External"),
    
    @SerializedName("TollFree")
    TOLLFREE("TollFree"),
    
    @SerializedName("Local")
    LOCAL("Local");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("paymentType")
  private PaymentTypeEnum paymentType = null;

  @SerializedName("phoneNumber")
  private String phoneNumber = null;

  @SerializedName("status")
  private String status = null;

  /**
   * Phone number type
   */
  public enum TypeEnum {
    @SerializedName("VoiceFax")
    VOICEFAX("VoiceFax"),
    
    @SerializedName("FaxOnly")
    FAXONLY("FaxOnly"),
    
    @SerializedName("VoiceOnly")
    VOICEONLY("VoiceOnly");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Usage type of the phone number
   */
  public enum UsageTypeEnum {
    @SerializedName("MainCompanyNumber")
    MAINCOMPANYNUMBER("MainCompanyNumber"),
    
    @SerializedName("AdditionalCompanyNumber")
    ADDITIONALCOMPANYNUMBER("AdditionalCompanyNumber"),
    
    @SerializedName("CompanyNumber")
    COMPANYNUMBER("CompanyNumber"),
    
    @SerializedName("DirectNumber")
    DIRECTNUMBER("DirectNumber"),
    
    @SerializedName("CompanyFaxNumber")
    COMPANYFAXNUMBER("CompanyFaxNumber"),
    
    @SerializedName("ForwardedNumber")
    FORWARDEDNUMBER("ForwardedNumber");

    private String value;

    UsageTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("usageType")
  private UsageTypeEnum usageType = null;

  public PhoneNumberInfo id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Internal identifier of a phone number
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "Internal identifier of a phone number")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public PhoneNumberInfo country(CountryInfo country) {
    this.country = country;
    return this;
  }

   /**
   * Brief information on a phone number country
   * @return country
  **/
  @ApiModelProperty(example = "null", value = "Brief information on a phone number country")
  public CountryInfo getCountry() {
    return country;
  }

  public void setCountry(CountryInfo country) {
    this.country = country;
  }

  public PhoneNumberInfo extension(PhoneNumberInfoExtensionInfo extension) {
    this.extension = extension;
    return this;
  }

   /**
   * Information on the extension, to which the phone number is assigned. Returned only for the request of Account phone number list
   * @return extension
  **/
  @ApiModelProperty(example = "null", value = "Information on the extension, to which the phone number is assigned. Returned only for the request of Account phone number list")
  public PhoneNumberInfoExtensionInfo getExtension() {
    return extension;
  }

  public void setExtension(PhoneNumberInfoExtensionInfo extension) {
    this.extension = extension;
  }

  public PhoneNumberInfo features(List<String> features) {
    this.features = features;
    return this;
  }

  public PhoneNumberInfo addFeaturesItem(String featuresItem) {
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Indicates if this phone number is enabled to appear as CallerId and/or to send outbound SMS from it. Returned only for the request of Extension phone number list
   * @return features
  **/
  @ApiModelProperty(example = "null", value = "Indicates if this phone number is enabled to appear as CallerId and/or to send outbound SMS from it. Returned only for the request of Extension phone number list")
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }

  public PhoneNumberInfo location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Location (City, State). Filled for local US numbers
   * @return location
  **/
  @ApiModelProperty(example = "null", value = "Location (City, State). Filled for local US numbers")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public PhoneNumberInfo paymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system
   * @return paymentType
  **/
  @ApiModelProperty(example = "null", value = "Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system")
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }

  public PhoneNumberInfo phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Phone number
   * @return phoneNumber
  **/
  @ApiModelProperty(example = "null", value = "Phone number")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public PhoneNumberInfo status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral
   * @return status
  **/
  @ApiModelProperty(example = "null", value = "Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public PhoneNumberInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Phone number type
   * @return type
  **/
  @ApiModelProperty(example = "null", value = "Phone number type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PhoneNumberInfo usageType(UsageTypeEnum usageType) {
    this.usageType = usageType;
    return this;
  }

   /**
   * Usage type of the phone number
   * @return usageType
  **/
  @ApiModelProperty(example = "null", value = "Usage type of the phone number")
  public UsageTypeEnum getUsageType() {
    return usageType;
  }

  public void setUsageType(UsageTypeEnum usageType) {
    this.usageType = usageType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneNumberInfo phoneNumberInfo = (PhoneNumberInfo) o;
    return Objects.equals(this.id, phoneNumberInfo.id) &&
        Objects.equals(this.country, phoneNumberInfo.country) &&
        Objects.equals(this.extension, phoneNumberInfo.extension) &&
        Objects.equals(this.features, phoneNumberInfo.features) &&
        Objects.equals(this.location, phoneNumberInfo.location) &&
        Objects.equals(this.paymentType, phoneNumberInfo.paymentType) &&
        Objects.equals(this.phoneNumber, phoneNumberInfo.phoneNumber) &&
        Objects.equals(this.status, phoneNumberInfo.status) &&
        Objects.equals(this.type, phoneNumberInfo.type) &&
        Objects.equals(this.usageType, phoneNumberInfo.usageType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, country, extension, features, location, paymentType, phoneNumber, status, type, usageType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneNumberInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usageType: ").append(toIndentedString(usageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


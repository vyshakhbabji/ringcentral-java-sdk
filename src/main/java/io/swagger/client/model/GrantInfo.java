/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.GrantInfoExtensionInfo;

/**
 * GrantInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class GrantInfo {
  @SerializedName("uri")
  private String uri = null;

  @SerializedName("extension")
  private GrantInfoExtensionInfo extension = null;

  @SerializedName("callPickup")
  private Boolean callPickup = null;

  @SerializedName("callMonitoring")
  private Boolean callMonitoring = null;

  public GrantInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Canonical URI of a grant
   * @return uri
  **/
  @ApiModelProperty(example = "null", value = "Canonical URI of a grant")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public GrantInfo extension(GrantInfoExtensionInfo extension) {
    this.extension = extension;
    return this;
  }

   /**
   * Extension information
   * @return extension
  **/
  @ApiModelProperty(example = "null", value = "Extension information")
  public GrantInfoExtensionInfo getExtension() {
    return extension;
  }

  public void setExtension(GrantInfoExtensionInfo extension) {
    this.extension = extension;
  }

  public GrantInfo callPickup(Boolean callPickup) {
    this.callPickup = callPickup;
    return this;
  }

   /**
   * Specifies if picking up of other extensions' calls is allowed for the extension. If 'Presence' feature is disabled for the given extension, the flag is not returned
   * @return callPickup
  **/
  @ApiModelProperty(example = "null", value = "Specifies if picking up of other extensions' calls is allowed for the extension. If 'Presence' feature is disabled for the given extension, the flag is not returned")
  public Boolean getCallPickup() {
    return callPickup;
  }

  public void setCallPickup(Boolean callPickup) {
    this.callPickup = callPickup;
  }

  public GrantInfo callMonitoring(Boolean callMonitoring) {
    this.callMonitoring = callMonitoring;
    return this;
  }

   /**
   * Specifies if monitoring of other extensions' calls is allowed for the extension. If 'CallMonitoring' feature is disabled for the given extension, the flag is not returned
   * @return callMonitoring
  **/
  @ApiModelProperty(example = "null", value = "Specifies if monitoring of other extensions' calls is allowed for the extension. If 'CallMonitoring' feature is disabled for the given extension, the flag is not returned")
  public Boolean getCallMonitoring() {
    return callMonitoring;
  }

  public void setCallMonitoring(Boolean callMonitoring) {
    this.callMonitoring = callMonitoring;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrantInfo grantInfo = (GrantInfo) o;
    return Objects.equals(this.uri, grantInfo.uri) &&
        Objects.equals(this.extension, grantInfo.extension) &&
        Objects.equals(this.callPickup, grantInfo.callPickup) &&
        Objects.equals(this.callMonitoring, grantInfo.callMonitoring);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, extension, callPickup, callMonitoring);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrantInfo {\n");
    
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    callPickup: ").append(toIndentedString(callPickup)).append("\n");
    sb.append("    callMonitoring: ").append(toIndentedString(callMonitoring)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


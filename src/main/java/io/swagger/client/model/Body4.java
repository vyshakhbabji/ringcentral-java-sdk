/*
 * RingCentral API
 * RingCentral Connect Platform API
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CallerInfo;
import java.util.ArrayList;
import java.util.List;

/**
 * Body4
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-14T22:06:07.317Z")
public class Body4 {
  @SerializedName("from")
  private CallerInfo from = null;

  @SerializedName("replyOn")
  private Integer replyOn = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("to")
  private List<CallerInfo> to = new ArrayList<CallerInfo>();

  public Body4 from(CallerInfo from) {
    this.from = from;
    return this;
  }

   /**
   * Sender of a pager message. The extensionNumber property must be filled
   * @return from
  **/
  @ApiModelProperty(example = "null", value = "Sender of a pager message. The extensionNumber property must be filled")
  public CallerInfo getFrom() {
    return from;
  }

  public void setFrom(CallerInfo from) {
    this.from = from;
  }

  public Body4 replyOn(Integer replyOn) {
    this.replyOn = replyOn;
    return this;
  }

   /**
   * Internal identifier of a message this message replies to
   * @return replyOn
  **/
  @ApiModelProperty(example = "null", value = "Internal identifier of a message this message replies to")
  public Integer getReplyOn() {
    return replyOn;
  }

  public void setReplyOn(Integer replyOn) {
    this.replyOn = replyOn;
  }

  public Body4 text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 512 symbols
   * @return text
  **/
  @ApiModelProperty(example = "null", value = "Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 512 symbols")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public Body4 to(List<CallerInfo> to) {
    this.to = to;
    return this;
  }

  public Body4 addToItem(CallerInfo toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * Optional if replyOn parameter is specified. Receiver of a pager message. The extensionNumber property must be filled
   * @return to
  **/
  @ApiModelProperty(example = "null", value = "Optional if replyOn parameter is specified. Receiver of a pager message. The extensionNumber property must be filled")
  public List<CallerInfo> getTo() {
    return to;
  }

  public void setTo(List<CallerInfo> to) {
    this.to = to;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body4 body4 = (Body4) o;
    return Objects.equals(this.from, body4.from) &&
        Objects.equals(this.replyOn, body4.replyOn) &&
        Objects.equals(this.text, body4.text) &&
        Objects.equals(this.to, body4.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, replyOn, text, to);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body4 {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    replyOn: ").append(toIndentedString(replyOn)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

